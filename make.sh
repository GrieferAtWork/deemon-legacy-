#!/bin/bash
# Copyright (c) 2016 - deemon by Griefer@Work
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# +-- THIS IS AN AUTOGENERATED FILE --+
#     To modify this file, please
#       edit 'src/makemake.dee'
# +-----------------------------------+

compiler="gcc"
root_path=$(dirname `readlink -f "$0"`)
source_path="$root_path/src"
basic_build_path="$root_path/build/linux"
libffi_path="$source_path/deemon/runtime/libffi_linux"

basic_libname="libdeemon.so.102"
basic_binname="deemon.102"
update_alternatives_libname="libdeemon.102"
update_alternatives_binname2="deemon.102"
update_alternatives_binname="deemon"

full_libname="$basic_libname.102"
full_binname="$basic_binname.102"
lib_outputfile="$root_path/$full_libname"
bin_outputfile="$root_path/$full_binname"
# v This is hardcoded in deemon (to change you must modify 'src/deemon/lexer.c')
include_libpath="/usr/lib/deemon"

source_defines="-DDEE_USE_DEBUG_NEW -DDEE_LINK_DLL_EXPORT -DDEBUG_NEW_CONFIG_LINK_DLLEXPORT"
source_have_defines=""
source_includes="-I$root_path/include -I$root_path/src/deemon/runtime/libffi_linux/include -I$root_path/src/debug_new -I$root_path/src/tpp -I$root_path/src"
source_libs=""
source_flags_raw=""
source_libpaths=""
source_link_libs="-lffi -ldl -lm -lrt"
source_link_flags="-pthread"
source_link_libpaths="-L$libffi_path/.libs"
frontend_defines="-DDEE_LINK_DLL_IMPORT"
frontend_includes="-I$root_path/include"
frontend_flags_raw=""
frontend_libs="$lib_outputfile"
frontend_libpaths="-L`dirname $lib_outputfile`"

install_lib_path="/usr/lib"
install_bin_path="/usr/bin"

flags_debug="-g -D_DEBUG"
flags_ndebug="-O3 -DNDEBUG"

compile_force=0
compile_all_deemon=0
compile_all_libffi=0
verbose=0
changed_files=0
link_staticly=0

source_flags=""
frontend_flags=""
set_any_source_flags() {
	source_flags="$source_flags_raw $1"
	frontend_flags="$frontend_flags_raw $1"
}

# Calculate the compiler #include <...> path
compiler_includepath=""
inpaths=0
for line in $(echo | cpp -Wp,-v 2>&1); do
	if [[ $inpaths != 0 ]]; then
		if [[ "$line" == "End"* ]]; then
			inpaths=0
		elif [ -d "$line" ]; then
			if [ "$compiler_includepath" != "" ]; then
				LF=$'\n'
				compiler_includepath="$compiler_includepath$LF$line"
			else
				compiler_includepath="$line"
			fi
		fi
	else
		if [[ "$line" == *"#include"* ]]; then
			inpaths=1
		fi
	fi
done
unset inpaths

check_include_available() {
	for line in $compiler_includepath; do
		if [ -f "$line/$1" ]; then
			have_name=$(echo "${1/./_}")
			have_name=$(echo "${have_name/'/'/_}")
			have_name=$(echo "$have_name" | awk '{print toupper($0)}')
			source_have_defines="$source_have_defines -DHAVE_$have_name"
			break
		fi
	done
}

check_include_available "alloca.h"
check_include_available "asm/types.h"
check_include_available "bluetooth.h"
check_include_available "bluetooth/bluetooth.h"
check_include_available "debug_new.h"
check_include_available "dirent.h"
check_include_available "errno.h"
check_include_available "fcntl.h"
check_include_available "features.h"
check_include_available "float.h"
check_include_available "io.h"
check_include_available "limits.h"
check_include_available "linux/netlink.h"
check_include_available "malloc.h"
check_include_available "math.h"
check_include_available "netdb.h"
check_include_available "process.h"
check_include_available "pthread.h"
check_include_available "pwd.h"
check_include_available "sched.h"
check_include_available "semaphore.h"
check_include_available "setjmp.h"
check_include_available "signal.h"
check_include_available "stdarg.h"
check_include_available "stddef.h"
check_include_available "stdint.h"
check_include_available "stdio.h"
check_include_available "stdlib.h"
check_include_available "stdnoreturn.h"
check_include_available "string.h"
check_include_available "sys/resource.h"
check_include_available "sys/select.h"
check_include_available "sys/socket.h"
check_include_available "sys/stat.h"
check_include_available "sys/sysctl.h"
check_include_available "sys/sysinfo.h"
check_include_available "sys/time.h"
check_include_available "sys/types.h"
check_include_available "sys/un.h"
check_include_available "sys/wait.h"
check_include_available "time.h"
check_include_available "unistd.h"
check_include_available "utime.h"

# Update the list of source defines with the set of available includes
source_defines="$source_defines $source_have_defines"

# Debug configuration
build_path=""
additional_flags=""
make_debug_build=""
dependency_path=""

set_debug_mode() {
	if [ $1 != 0 ]; then
		make_debug_build="1"
		build_path="$basic_build_path/debug"
		additional_flags="$flags_debug"
	else
		make_debug_build="0"
		build_path="$basic_build_path/release"
		additional_flags="$flags_ndebug"
	fi
	dependency_path="$build_path/dependencies"
}

# Default to enabling debug mode for now
# >> Once deemon gets really stable, this default will change
set_debug_mode 1

check_compiler() {
	if [ "`which $compiler`" == "" ]; then
		echo "ERROR : Configured compiler not installed: $compiler"
		if [ "$compiler" == "gcc" ]; then
			echo "Fix this problem by typing: 'sudo apt-get install gcc'"
		elif [ "$compiler" == "g++" ]; then
			echo "Fix this problem by typing: 'sudo apt-get install g++'"
		fi
		exit 1
	fi
}

compile_libffi() {
	# Make sure that libffi is compiled
	if [ $compile_all_libffi == 1 ] || \
	 ! [ -f $libffi_path/include/ffi.h ]; then
		cd $libffi_path
		chmod +x clean_libffi.sh
		chmod +x make_libffi.sh
		bash ./clean_libffi.sh
		bash ./make_libffi.sh
		make
		cd $root_path
	fi
}
make_libffi() {
	compile_libffi
}
link_libffi() {
	compile_libffi
}

get_build_file_of_sourcefile() {
	buildfile="`basename $1`.o"
	echo "$build_path/$buildfile"
}
get_dependency_file_of_sourcefile() {
	depfile="`basename $1`.mf"
	echo "$dependency_path/$depfile"
}

make_object_file() {
	changed_files=$((changed_files+1))
	mkdir -p "$build_path" > /dev/null 2>&1
	mkdir -p "$dependency_path" > /dev/null 2>&1
	build_file=`get_build_file_of_sourcefile "$1"`
	dependency_file=`get_dependency_file_of_sourcefile $1`
	if [ $verbose != 0 ]; then
		echo "Compiling: $1 --> $build_file"
	else
		echo "Compiling: $1"
	fi
	$compiler -c -fPIC \
		$source_libpaths \
		$source_flags \
		$source_defines \
		$source_includes \
		$additional_flags \
		-MMD $1 -o $build_file \
		-MF "$dependency_file" \
	$source_libs
}
source_file_has_changed() {
	build_file=`get_build_file_of_sourcefile "$1"`
	if [ "$compile_all_deemon" != 0 ] || \
	 ! [ -f "$build_file" ] || \
	   [ "$1" -nt "$build_file" ]; then
		return 0;
	fi
	depfile=`get_dependency_file_of_sourcefile "$1"`
	! [ -f "$depfile" ] && return 0
	depdata=`cat "$depfile" | tr -d '\\\\\n'`
	first=1
	for dep in $depdata; do
		if [ $first == 1 ]; then first=0; else
			if [ "$dep" -nt "$build_file" ]; then
				echo "Dependency has changed:"
				echo "	input file: $1"
				echo "	depends on: $dep"
				return 0
			fi
		fi
	done
	return 1
}
update_object_file() {
	# Compile the object file if it doesn't exist or the source file has changed
	source_file_has_changed "$1" && make_object_file "$1"
}

compile_deemon() {
	# Create object files for all sources
	update_object_file "$source_path/debug_new/debug_new.c"
	update_object_file "$source_path/deemon/_deprecated.c"
	update_object_file "$source_path/deemon/array.c"
	update_object_file "$source_path/deemon/cell.c"
	update_object_file "$source_path/deemon/cfunction.c"
	update_object_file "$source_path/deemon/class/class.c"
	update_object_file "$source_path/deemon/compiler/code.c"
	update_object_file "$source_path/deemon/compiler/codewriter.c"
	update_object_file "$source_path/deemon/compiler/lexer.c"
	update_object_file "$source_path/deemon/compiler/sast.c"
	update_object_file "$source_path/deemon/compiler/sast_compile.c"
	update_object_file "$source_path/deemon/compiler/sast_parse.c"
	update_object_file "$source_path/deemon/compiler/scope.c"
	update_object_file "$source_path/deemon/compiler/xast.c"
	update_object_file "$source_path/deemon/compiler/xast_compile.c"
	update_object_file "$source_path/deemon/compiler/xast_parse.c"
	update_object_file "$source_path/deemon/deemonrun.c"
	update_object_file "$source_path/deemon/dex.c"
	update_object_file "$source_path/deemon/dict.c"
	update_object_file "$source_path/deemon/enum_attributes.c"
	update_object_file "$source_path/deemon/error.c"
	update_object_file "$source_path/deemon/file/file.c"
	update_object_file "$source_path/deemon/float.c"
	update_object_file "$source_path/deemon/foreign_function.c"
	update_object_file "$source_path/deemon/fs_api.c"
	update_object_file "$source_path/deemon/gc.c"
	update_object_file "$source_path/deemon/generic_vtable.c"
	update_object_file "$source_path/deemon/integer.c"
	update_object_file "$source_path/deemon/io_buffer.c"
	update_object_file "$source_path/deemon/iterator.c"
	update_object_file "$source_path/deemon/list.c"
	update_object_file "$source_path/deemon/marshal.c"
	update_object_file "$source_path/deemon/marshal_data.c"
	update_object_file "$source_path/deemon/math.c"
	update_object_file "$source_path/deemon/memberdef.c"
	update_object_file "$source_path/deemon/memberfunction.c"
	update_object_file "$source_path/deemon/mutex.c"
	update_object_file "$source_path/deemon/none.c"
	update_object_file "$source_path/deemon/object.c"
	update_object_file "$source_path/deemon/pipe.c"
	update_object_file "$source_path/deemon/process.c"
	update_object_file "$source_path/deemon/random.c"
	update_object_file "$source_path/deemon/runtime/builtin_functions.c"
	update_object_file "$source_path/deemon/runtime/builtins.c"
	update_object_file "$source_path/deemon/runtime/execute.c"
	update_object_file "$source_path/deemon/runtime/extern.c"
	update_object_file "$source_path/deemon/runtime/function.c"
	update_object_file "$source_path/deemon/sequence.c"
	update_object_file "$source_path/deemon/set.c"
	update_object_file "$source_path/deemon/signalhandler.c"
	update_object_file "$source_path/deemon/socket.c"
	update_object_file "$source_path/deemon/struct.c"
	update_object_file "$source_path/deemon/structured.c"
	update_object_file "$source_path/deemon/super.c"
	update_object_file "$source_path/deemon/thread.c"
	update_object_file "$source_path/deemon/time.c"
	update_object_file "$source_path/deemon/tls.c"
	update_object_file "$source_path/deemon/traceback.c"
	update_object_file "$source_path/deemon/tuple.c"
	update_object_file "$source_path/deemon/type.c"
	update_object_file "$source_path/deemon/unicode/string.c"
	update_object_file "$source_path/deemon/uuid.c"
	update_object_file "$source_path/deemon/value.c"
	update_object_file "$source_path/deemon/weakref.c"
}

link_deemon() {
	echo "Create shared object (library): $lib_outputfile"
	$compiler $source_link_libpaths $source_link_flags $additional_flags \
		"$build_path/debug_new.c.o" \
		"$build_path/_deprecated.c.o" \
		"$build_path/array.c.o" \
		"$build_path/cell.c.o" \
		"$build_path/cfunction.c.o" \
		"$build_path/class.c.o" \
		"$build_path/code.c.o" \
		"$build_path/codewriter.c.o" \
		"$build_path/lexer.c.o" \
		"$build_path/sast.c.o" \
		"$build_path/sast_compile.c.o" \
		"$build_path/sast_parse.c.o" \
		"$build_path/scope.c.o" \
		"$build_path/xast.c.o" \
		"$build_path/xast_compile.c.o" \
		"$build_path/xast_parse.c.o" \
		"$build_path/deemonrun.c.o" \
		"$build_path/dex.c.o" \
		"$build_path/dict.c.o" \
		"$build_path/enum_attributes.c.o" \
		"$build_path/error.c.o" \
		"$build_path/file.c.o" \
		"$build_path/float.c.o" \
		"$build_path/foreign_function.c.o" \
		"$build_path/fs_api.c.o" \
		"$build_path/gc.c.o" \
		"$build_path/generic_vtable.c.o" \
		"$build_path/integer.c.o" \
		"$build_path/io_buffer.c.o" \
		"$build_path/iterator.c.o" \
		"$build_path/list.c.o" \
		"$build_path/marshal.c.o" \
		"$build_path/marshal_data.c.o" \
		"$build_path/math.c.o" \
		"$build_path/memberdef.c.o" \
		"$build_path/memberfunction.c.o" \
		"$build_path/mutex.c.o" \
		"$build_path/none.c.o" \
		"$build_path/object.c.o" \
		"$build_path/pipe.c.o" \
		"$build_path/process.c.o" \
		"$build_path/random.c.o" \
		"$build_path/builtin_functions.c.o" \
		"$build_path/builtins.c.o" \
		"$build_path/execute.c.o" \
		"$build_path/extern.c.o" \
		"$build_path/function.c.o" \
		"$build_path/sequence.c.o" \
		"$build_path/set.c.o" \
		"$build_path/signalhandler.c.o" \
		"$build_path/socket.c.o" \
		"$build_path/struct.c.o" \
		"$build_path/structured.c.o" \
		"$build_path/super.c.o" \
		"$build_path/thread.c.o" \
		"$build_path/time.c.o" \
		"$build_path/tls.c.o" \
		"$build_path/traceback.c.o" \
		"$build_path/tuple.c.o" \
		"$build_path/type.c.o" \
		"$build_path/string.c.o" \
		"$build_path/uuid.c.o" \
		"$build_path/value.c.o" \
		"$build_path/weakref.c.o" \
	-shared -Wl,-soname,$basic_libname -o "$lib_outputfile" $source_link_libs
}
link_deemon_static() {
	echo "Create executable object (frontend; static): $bin_outputfile"
	$compiler $source_link_libpaths $source_link_flags $additional_flags -o $bin_outputfile \
		"$build_path/main.c.o" \
		"$build_path/debug_new.c.o" \
		"$build_path/_deprecated.c.o" \
		"$build_path/array.c.o" \
		"$build_path/cell.c.o" \
		"$build_path/cfunction.c.o" \
		"$build_path/class.c.o" \
		"$build_path/code.c.o" \
		"$build_path/codewriter.c.o" \
		"$build_path/lexer.c.o" \
		"$build_path/sast.c.o" \
		"$build_path/sast_compile.c.o" \
		"$build_path/sast_parse.c.o" \
		"$build_path/scope.c.o" \
		"$build_path/xast.c.o" \
		"$build_path/xast_compile.c.o" \
		"$build_path/xast_parse.c.o" \
		"$build_path/deemonrun.c.o" \
		"$build_path/dex.c.o" \
		"$build_path/dict.c.o" \
		"$build_path/enum_attributes.c.o" \
		"$build_path/error.c.o" \
		"$build_path/file.c.o" \
		"$build_path/float.c.o" \
		"$build_path/foreign_function.c.o" \
		"$build_path/fs_api.c.o" \
		"$build_path/gc.c.o" \
		"$build_path/generic_vtable.c.o" \
		"$build_path/integer.c.o" \
		"$build_path/io_buffer.c.o" \
		"$build_path/iterator.c.o" \
		"$build_path/list.c.o" \
		"$build_path/marshal.c.o" \
		"$build_path/marshal_data.c.o" \
		"$build_path/math.c.o" \
		"$build_path/memberdef.c.o" \
		"$build_path/memberfunction.c.o" \
		"$build_path/mutex.c.o" \
		"$build_path/none.c.o" \
		"$build_path/object.c.o" \
		"$build_path/pipe.c.o" \
		"$build_path/process.c.o" \
		"$build_path/random.c.o" \
		"$build_path/builtin_functions.c.o" \
		"$build_path/builtins.c.o" \
		"$build_path/execute.c.o" \
		"$build_path/extern.c.o" \
		"$build_path/function.c.o" \
		"$build_path/sequence.c.o" \
		"$build_path/set.c.o" \
		"$build_path/signalhandler.c.o" \
		"$build_path/socket.c.o" \
		"$build_path/struct.c.o" \
		"$build_path/structured.c.o" \
		"$build_path/super.c.o" \
		"$build_path/thread.c.o" \
		"$build_path/time.c.o" \
		"$build_path/tls.c.o" \
		"$build_path/traceback.c.o" \
		"$build_path/tuple.c.o" \
		"$build_path/type.c.o" \
		"$build_path/string.c.o" \
		"$build_path/uuid.c.o" \
		"$build_path/value.c.o" \
		"$build_path/weakref.c.o" \
	$source_link_libs
}
make_deemon() {
	changed_files=0
	compile_deemon
	if [ $changed_files == 0 ] && [ -f "$lib_outputfile" ]; then
		echo "No changes (not relinking $lib_outputfile)"
	else
		link_deemon
		# Relink the local lib-file so that the correct library name can be found
		rm "$root_path/$basic_libname" > /dev/null 2>&1
		ln -s "$full_libname" "$root_path/$basic_libname"
	fi
}

compile_frontend() {
	update_object_file "$source_path/main.c"
}

make_deemon_static() {
	changed_files=0
	compile_deemon
	compile_frontend
	if [ $changed_files == 0 ] && [ -f "$bin_outputfile" ]; then
		echo "No changes (not relinking $bin_outputfile)"
	else
		link_deemon_static
	fi
}

link_frontend() {
	echo "Create executable object (frontend): $bin_outputfile"
	$compiler \
		$frontend_libpaths \
		$frontend_defines \
		$frontend_includes \
		$frontend_flags \
		$additional_flags \
		-o $bin_outputfile \
		"$build_path/main.c.o" \
		$frontend_libs
}

make_frontend() {
	changed_files=0
	compile_frontend
	if [ $changed_files == 0 ] && [ -f "$bin_outputfile" ]; then
		echo "No changes (not rebuilding $bin_outputfile)"
	else
		link_frontend
	fi
}

check_last_build_was_static() {
	check_file="$root_path/.last_build_was_static"
	if [ -f "$check_file" ]; then
		if [ $link_staticly == 0 ]; then
			rm $bin_outputfile
		fi
	else
		if [ $link_staticly != 0 ]; then
			rm $bin_outputfile
		fi
	fi
	if [ $link_staticly != 0 ]; then
		> "$check_file"
	else
		rm "$check_file" > /dev/null 2>&1
	fi
}
exec_compile() {
	compile_libffi || return $?
	compile_deemon || return $?
	compile_frontend || return $?
	return 0
}
exec_make() {
	check_last_build_was_static
	make_libffi || return $?
	if [ $link_staticly != 0 ]; then
		make_deemon_static || return $?
	else
		make_deemon || return $?
		make_frontend || return $?
	fi

	echo "Compiling extensions"
	bash "$root_path/make.sh" run "$source_path/dex/make.dee"

	return 0
}
exec_link() {
	check_last_build_was_static
	link_libffi || return $?
	if [ $link_staticly != 0 ]; then
		link_deemon_static || return $?
	else
		link_deemon || return $?
		link_frontend || return $?
	fi
	return 0
}
exec_install() {
	if [ $compile_force != 1 ] && [ -d "/usr/bin/lib/include" ]; then
		echo ""
		echo "!!! ATTENTION !!!"
		echo "Library folder of deemon v100 found on your machine"
		echo "Deemon now uses '/usr/lib/deemon/include', but for"
		echo "portability still searches the folder of the deemon"
		echo "executable + 'lib', which defaults '/usr/bin/lib'"
		echo -e "To fix this problem and remove v100, type: '\033[0;32msudo ./make.sh purge100\033[0m'"
		echo -e "To ignore this problem, add '\033[0;32m--force\033[0m'" when calling make.sh
		echo ""
		return 1
	fi

	exec_make || return $?
	if [ $link_staticly == 0 ]; then
		lib_api="$install_lib_path/$basic_libname"
		lib_dst="$install_lib_path/$full_libname"

		echo "Installing library: $lib_dst"
		cp "$lib_outputfile" "$lib_dst" || return $?
		chmod 0775 "$lib_dst"

		echo "Adding update-alternative : '$update_alternatives_libname' '$lib_dst'"
		update-alternatives --install "$lib_api" "$update_alternatives_libname" "$lib_dst" 102
	fi

	exe_dst="$install_bin_path/$full_binname"
	echo "Installing Executable: $exe_dst"
	cp "$bin_outputfile" "$exe_dst" || return $?
	chmod 0775 "$exe_dst"
	echo "Adding update-alternative : '$update_alternatives_binname2' '$exe_dst'"
	update-alternatives --install "$install_bin_path/$update_alternatives_binname2" "$update_alternatives_binname2" "$exe_dst" 102

	echo "Adding update-alternative : '$update_alternatives_binname' '$install_bin_path/$update_alternatives_binname2'"
	update-alternatives --install "$install_bin_path/$update_alternatives_binname" "$update_alternatives_binname" "$install_bin_path/$update_alternatives_binname2" 106980864

	echo "Installing Library: $include_libpath"
	# NOTE: If any headers get removed at one point, add a rm for them here
	#rm -r "$include_libpath/include" # Keep old headers (only overwrite with new)
	mkdir "$include_libpath" > /dev/null 2>&1
	cp -R "$root_path/lib/include" "$include_libpath"

	# Make sure everything in the libpath has the correct permissions
	chmod -R 0775 "$include_libpath"
}

exec_clean() {
	cd "$libffi_path"
	bash ./clean_libffi.sh
	cd "$root_path"
	rm -r "$root_path/build" > /dev/null 2>&1
	rm -r "$root_path/ipch" > /dev/null 2>&1
	if [ $compile_all_deemon != 0 ]; then
		rm deemon.* > /dev/null 2>&1
		rm libdeemon.* > /dev/null 2>&1
	fi
	rm deemon.exp > /dev/null 2>&1
	rm deemon.ilk > /dev/null 2>&1
	rm deemon.lib > /dev/null 2>&1
	rm libdeemon.exp > /dev/null 2>&1
	rm libdeemon.ilk > /dev/null 2>&1
	rm libdeemon.lib > /dev/null 2>&1
	rm .last_build_was_static > /dev/null 2>&1
	rm .vs/_project.sdf > /dev/null 2>&1
	rm .vs/_project.opensdf > /dev/null 2>&1
	rm .vs/_project.suo > /dev/null 2>&1
	rm .vs/_project.v12.suo > /dev/null 2>&1
	rm "$root_path/$basic_libname" > /dev/null 2>&1
	return 0
}

try_rm() {
	if [ -f "$1" ]; then
		echo "Removing: '$1'"
		rm "$1"
	else
		echo "Not found: '$1'"
	fi
}

exec_remove() {
	try_rm "$install_lib_path/$full_libname"
	try_rm "$install_bin_path/$full_binname"
	echo "Removing update-alternatives: '$update_alternatives_libname' => '$install_lib_path/$full_libname'"
	update-alternatives --remove "$update_alternatives_libname" "$install_lib_path/$full_libname"
	echo "Removing update-alternatives: '$update_alternatives_binname2' => '$install_bin_path/$full_binname'"
	update-alternatives --remove "$update_alternatives_binname2" "$install_bin_path/$full_binname"
	echo "Removing update-alternatives: '$update_alternatives_binname' => '$install_bin_path/$update_alternatives_binname2'"
	update-alternatives --remove "$update_alternatives_binname" "$install_bin_path/$update_alternatives_binname2"
}

exec_purge() {
	exec_remove
	rm -r -v "$include_libpath"
}

check_headers() {
	if [ -d "$1" ]; then
		echo "Deemon headers installed: $1'"
	fi
}
exec_status() {
	if [ -f "$install_lib_path/$full_libname" ]; then
		echo "Library installed: '$install_lib_path/$full_libname'"
	fi
	if [ -f "$install_bin_path/$full_binname" ]; then
		echo "Binary installed: '$install_bin_path/$full_binname'"
	fi
	# Check for header locations
	check_headers "$include_libpath/include"
	check_headers "$include_libpath/include/cxx"
	check_headers "$include_libpath/include/tpp"
	check_headers "$include_libpath/include/dex"
	check_headers "$install_bin_path/lib/include"
	check_headers "$install_bin_path/lib/include/cxx"
	check_headers "$install_bin_path/lib/include/tpp"
	check_headers "$install_bin_path/lib/include/dex"
}

usage() {
	echo "Usage: $0 [Flags...] {make|run|install|remove|...}"
	echo "Flags:"
	echo "       -h|--help           Display this help"
	echo "       -version|--version  Display information about the deemon version"
	echo "       -v|--verbose        Enable verbose output"
	echo "       -s|--static         Create a staticly linked deemon executable"
	echo "          --changed        Only compile changed source files (default)"
	echo "       -a|--all            Compile all deemon source files"
	echo "       -aa|--allall        Compile all deemon/libffi source files"
	echo "       -debug|--debug      Compile deemon sources in debug mode (default)"
	echo "       -ndebug|--no-debug  Compile deemon sources in non-debug mode with optimizations"
	echo "       -lpath|--lib-path   Set the library path (default: '/usr/lib')"
	echo "       -bpath|--bin-path   Set the binary path (default: '/usr/bin')"
	echo "       -f|--flag           Pass a given set of flags to all code-generating compiler calls"
	echo "       --force             Ignored warnings and forces installation"
	echo "Modes:"
	echo "       compile             Compile sources files"
	echo "       link                Link source files"
	echo "       make                Compile sources files and link them"
	echo "       run                 Run the locally generated version of deemon after 'make.sh make'"
	echo "       install             Compile sources files, link them and install"
	echo "       clean               Remove temporary & build files"
	echo "       remove              Uninstall deemon, but keep library headers"
	echo "       purge               Uninstall deemon completely"
	echo "       status              Shows information about the deemon installation on your system"
	echo "       purge100            Remove old (default) installations of deemon v100 (required for upgrading)"
}

if [ $# == 0 ]; then
	usage
	exit 1
else
	while [[ $# -gt 0 ]]; do
		case $1 in
			-lpath|--lib-path)
				install_lib_path="$2"
				shift
				;;
			-bpath|--bin-path)
				install_bin_path="$2"
				shift
				;;
			-f|--flag)
				set_any_source_flags "$2"
				shift
				;;
			--force)
				compile_force=1
				;;
			-h|--help)
				usage
				exit 0
				;;
			-version|--version)
				echo "Make script for deemon version 102/102:0"
				exit 0
				;;
			-v|--verbose)
				verbose=1
				;;
			-s|--static)
				link_staticly=1
				;;
			--changed)
				compile_all_deemon=0
				compile_all_libffi=0
				;;
			-a|--all)
				compile_all_deemon=1
				;;
			-aa|--allall)
				compile_all_deemon=1
				compile_all_libffi=1
				;;
			-debug|--debug)
				set_debug_mode 1
				;;
			-ndebug|--no-debug)
				set_debug_mode 0
				;;
			compile)
				check_compiler || exit $?
				exec_compile
				exit $?
				;;
			link)
				check_compiler || exit $?
				exec_link
				exit $?
				;;
			make)
				check_compiler || exit $?
				exec_make
				exit $?
				;;
			run)
				# Shift the 'run' argument to not be included when invoking deemon
				shift
				if [ -f "$root_path/.last_build_was_static" ]; then
					# Simple case: No need to fix the libpath for a static binary
					"$bin_outputfile" $*
					exit "$?"
				else
					# Export the current directory to be included in the library search path
					old_libpath="$LD_LIBRARY_PATH"
					export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$root_path"
					"$bin_outputfile" $*
					result="$?"
					export LD_LIBRARY_PATH="$old_libpath"
					exit "$result"
				fi
				;;
			install)
				check_compiler || exit $?
				exec_install
				exit $?
				;;
			clean)
				exec_clean
				exit $?
				;;
			remove)
				exec_remove
				exit $?
				;;
			purge)
				exec_purge
				exit $?
				;;
			status)
				exec_status
				exit $?
				;;
			*)
				echo "Unknown argument: $1"
				usage
				exit 1
				;;
		esac
		shift
	done
	echo "Error: No mode given"
fi

