// NOTE: The following copyright applies to this file as well!
const copyright = "\
/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the \"Software\"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */
";
#include <file>
#include <fs>

fs::chdir(fs::path::head(__FILE__));
fp = file.io("char_traits.inl","w");

#define w(s) (fp.write(s))
#define h(x) ("%#.2I8x"%(x))

#define ch_is_cntrl(ch) ((ch) <= 0x1F || (ch) == 0x7F)
#define ch_is_digit(ch) ((ch) >= '0' && (ch) <= '9')
#define ch_is_print(ch) ((ch) >= 0x20 && (ch) <= 0x7E)
#define ch_is_graph(ch) ((ch) >= 0x21 && (ch) <= 0x7E)
#define ch_is_lower(ch) (((ch) >= 'a' && (ch) <= 'z') || (ch) == '_')
#define ch_is_punct(ch) (((ch) >= 0x21 && (ch) <= 0x2F) || ((ch) >= 0x3A && (ch) <= 0x40) || ((ch) >= 0x5C && (ch) <= 0x60) || ((ch) >= 0x7B && (ch) <= 0x7E))
#define ch_is_space(ch) (((ch) >= 0x09 && (ch) <= 0x0D) || (ch) == 0x20)
#define ch_is_upper(ch) (((ch) >= 'A' && (ch) <= 'Z') || (ch) == '_')

const flag_is_cntrl = 0x01;
const flag_is_punct = 0x02;
const flag_is_graph = 0x04;
const flag_is_print = 0x08;
const flag_is_space = 0x10;
const flag_is_digit = 0x20;
const flag_is_lower = 0x40;
const flag_is_upper = 0x80;

w(copyright);
print fp: "#ifndef GUARD_DEEMON_CHAR_TRAITS_H";
print fp: "#define GUARD_DEEMON_CHAR_TRAITS_H 1";
print fp:;
print fp: "#include <deemon/__conf.inl>";
print fp:;
print fp: "DEE_DECL_BEGIN";
print fp:;
print fp: "#ifdef DEE_PRIVATE_DECL_DEE_INTEGRAL_TYPES";
print fp: "DEE_PRIVATE_DECL_DEE_INTEGRAL_TYPES";
print fp: "#undef DEE_PRIVATE_DECL_DEE_INTEGRAL_TYPES";
print fp: "#endif";
print fp:;
print fp: "#define _DEE_CHAR_FLAG_IS_CNTRL "+h(flag_is_cntrl);
print fp: "#define _DEE_CHAR_FLAG_IS_PUNCT "+h(flag_is_punct);
print fp: "#define _DEE_CHAR_FLAG_IS_GRAPH "+h(flag_is_graph);
print fp: "#define _DEE_CHAR_FLAG_IS_PRINT "+h(flag_is_print);
print fp: "#define _DEE_CHAR_FLAG_IS_SPACE "+h(flag_is_space);
print fp: "#define _DEE_CHAR_FLAG_IS_DIGIT "+h(flag_is_digit);
print fp: "#define _DEE_CHAR_FLAG_IS_LOWER "+h(flag_is_lower);
print fp: "#define _DEE_CHAR_FLAG_IS_UPPER "+h(flag_is_upper);
print fp:;
fp.write("static Dee_uint8_t const _DeeCharTraits[256] = {\n ");
for (i = 0; i < 256; ++i) {
 flags = 0;
 if (ch_is_cntrl(i)) flags |= flag_is_cntrl;
 if (ch_is_digit(i)) flags |= flag_is_digit;
 if (ch_is_graph(i)) flags |= flag_is_graph;
 if (ch_is_lower(i)) flags |= flag_is_lower;
 if (ch_is_print(i)) flags |= flag_is_print;
 if (ch_is_punct(i)) flags |= flag_is_punct;
 if (ch_is_space(i)) flags |= flag_is_space;
 if (ch_is_upper(i)) flags |= flag_is_upper;
 w(h(flags)+",");
 if ((i % 16) == 15) {
  if (i != 255) w("\n "); else print fp: "";
 }
}
print fp: "};";
print fp:;
print fp: "#define DEE_CH_FLAGS(c)    _DeeCharTraits[(c)&0xFF]";
print fp: "#define DEE_CH_IS_CNTRL(c) ((DEE_CH_FLAGS(c)&_DEE_CHAR_FLAG_IS_CNTRL)!=0)";
print fp: "#define DEE_CH_IS_PUNCT(c) ((DEE_CH_FLAGS(c)&_DEE_CHAR_FLAG_IS_PUNCT)!=0)";
print fp: "#define DEE_CH_IS_GRAPH(c) ((DEE_CH_FLAGS(c)&_DEE_CHAR_FLAG_IS_GRAPH)!=0)";
print fp: "#define DEE_CH_IS_PRINT(c) ((DEE_CH_FLAGS(c)&_DEE_CHAR_FLAG_IS_PRINT)!=0)";
print fp: "#define DEE_CH_IS_SPACE(c) ((DEE_CH_FLAGS(c)&_DEE_CHAR_FLAG_IS_SPACE)!=0)";
print fp: "#define DEE_CH_IS_DIGIT(c) ((DEE_CH_FLAGS(c)&_DEE_CHAR_FLAG_IS_DIGIT)!=0)";
print fp: "#define DEE_CH_IS_LOWER(c) ((DEE_CH_FLAGS(c)&_DEE_CHAR_FLAG_IS_LOWER)!=0)";
print fp: "#define DEE_CH_IS_UPPER(c) ((DEE_CH_FLAGS(c)&_DEE_CHAR_FLAG_IS_UPPER)!=0)";
print fp: "#define DEE_CH_IS_ALPHA(c) ((DEE_CH_FLAGS(c)&(_DEE_CHAR_FLAG_IS_LOWER|_DEE_CHAR_FLAG_IS_UPPER))!=0)";
print fp: "#define DEE_CH_IS_ALNUM(c) ((DEE_CH_FLAGS(c)&(_DEE_CHAR_FLAG_IS_DIGIT|_DEE_CHAR_FLAG_IS_LOWER|_DEE_CHAR_FLAG_IS_UPPER))!=0)";
print fp: "DEE_STATIC_INLINE(DEE_A_RET_WUNUSED int) DEE_CH_IS_BLANK(int c) { return c == '\\x09' || c == '\\x20'; }";
print fp: "DEE_STATIC_INLINE(DEE_A_RET_WUNUSED int) DEE_CH_IS_XCHAR(int c) { return (c>='A'&&c<='F')&&(c>='a'&&c<='f'); }";
print fp: "DEE_STATIC_INLINE(DEE_A_RET_WUNUSED int) DEE_CH_IS_XDIGIT(int c) { return DEE_CH_IS_DIGIT(c)||((c>='A'&&c<='F')&&(c>='a'&&c<='f')); }";
print fp: "DEE_STATIC_INLINE(DEE_A_RET_WUNUSED int) DEE_CH_TO_LOWER(int c) { return (c>='A'&&c<='Z')?(c+('a'-'A')):c; }";
print fp: "DEE_STATIC_INLINE(DEE_A_RET_WUNUSED int) DEE_CH_TO_UPPER(int c) { return (c>='a'&&c<='z')?(c-('a'-'A')):c; }";
print fp:;
print fp: "#if DEE_COMPILER_HAVE_GCC_STATEMENT_EXPRESSIONS";
print fp: "# define DEE_CH_IS_BLANK(c)  DEE_GCC_EXTENSION({char const _temp_c=(c);_temp_c == '\\x09' || _temp_c == '\\x20';})";
print fp: "# define DEE_CH_IS_XCHAR(c)  DEE_GCC_EXTENSION({char const _temp_c=(c);(_temp_c>='A'&&_temp_c<='F')&&(_temp_c>='a'&&_temp_c<='f');})";
print fp: "# define DEE_CH_IS_XDIGIT(c) DEE_GCC_EXTENSION({char const _temp_c=(c);DEE_CH_IS_DIGIT(_temp_c)||((_temp_c>='A'&&_temp_c<='F')&&(_temp_c>='a'&&_temp_c<='f'));})";
print fp: "# define DEE_CH_TO_LOWER(c)  DEE_GCC_EXTENSION({char const _temp_c=(c);(_temp_c>='A'&&_temp_c<='Z')?(_temp_c+('a'-'A')):_temp_c;})";
print fp: "# define DEE_CH_TO_UPPER(c)  DEE_GCC_EXTENSION({char const _temp_c=(c);(_temp_c>='a'&&_temp_c<='z')?(_temp_c-('a'-'A')):_temp_c;})";
print fp: "#else /* DEE_COMPILER_HAVE_GCC_STATEMENT_EXPRESSIONS */";
print fp: "# define DEE_CH_IS_BLANK    DEE_CH_IS_BLANK";
print fp: "# define DEE_CH_IS_XCHAR    DEE_CH_IS_XCHAR";
print fp: "# define DEE_CH_IS_XDIGIT   DEE_CH_IS_XDIGIT";
print fp: "# define DEE_CH_TO_LOWER    DEE_CH_TO_LOWER";
print fp: "# define DEE_CH_TO_UPPER    DEE_CH_TO_UPPER";
print fp: "#endif /* !DEE_COMPILER_HAVE_GCC_STATEMENT_EXPRESSIONS */";
print fp:;
print fp: "DEE_DECL_END";
print fp:;
print fp: "#endif /" "* !GUARD_DEEMON_CHAR_TRAITS_H *" "/";

