const copyright = "\
/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the \"Software\"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */
";

#include <fs>
#include <file>

// One of the things I did to make the API nicer, was to
// implement what I call type-generic macros.
// Basically I implement function-like macros that
// accept a tyname as an argument, which I then use
// to link a given function at preprocessor time.
// 
// What exactly happens depends on the type in question
// and the type configuration that we deduced in <__features.inl>
// But in the end, this allows us to write something like this:
// >> int x = DeeObject_Cast(int,ob);
// Which is much nicer and 100% portable, than the alternative (without macros).
// Which would require us to call 'DeeObject_Int32' and have a #if-block going
// through all the different sizes that 'int' could have.
//
// If you still don't understand what this file is about,
// think of c++ templates. Now think of a system where you
// don't have a default-template and can only use templates
// that you explicitly initialized.
// That's what this is.
// Here I initialize those templates, one at a time.

fs.chdir(fs.path.head(__FILE__));

function open(name): result {
	result = file.io(name,"w");
	result.write(copyright);
	print result: "/" "* Autogenerated file (do not edit) *" "/";
}

f_integer   = open("../../../include/deemon/__tg_integer.inl");
f_ctypes    = open("../../../include/deemon/__ctypes.inl");
f_cast      = open("../../../include/deemon/__tg_cast.inl");
f_members   = open("../../../include/deemon/__tg_members.inl");
files = [f_integer,f_ctypes,f_cast,f_members];

print f_ctypes: "\
#ifndef GUARD_DEEMON___CTYPES_INL
#define GUARD_DEEMON___CTYPES_INL 1

#include <deemon/__conf.inl>

#define DEE_PRIVATE_TYPEDEF_int8_t          (auto,1,1,0,0)
#define DEE_PRIVATE_TYPEDEF_atomic_int8_t   (auto,1,1,1,0)
#define DEE_PRIVATE_TYPEDEF_int16_t         (auto,1,2,0,0)
#define DEE_PRIVATE_TYPEDEF_atomic_int16_t  (auto,1,2,1,0)
#define DEE_PRIVATE_TYPEDEF_int32_t         (auto,1,4,0,0)
#define DEE_PRIVATE_TYPEDEF_atomic_int32_t  (auto,1,4,1,0)
#define DEE_PRIVATE_TYPEDEF_int64_t         (auto,1,8,0,0)
#define DEE_PRIVATE_TYPEDEF_atomic_int64_t  (auto,1,8,1,0)
#define DEE_PRIVATE_TYPEDEF_uint8_t         (auto,0,1,0,0)
#define DEE_PRIVATE_TYPEDEF_atomic_uint8_t  (auto,0,1,1,0)
#define DEE_PRIVATE_TYPEDEF_uint16_t        (auto,0,2,0,0)
#define DEE_PRIVATE_TYPEDEF_atomic_uint16_t (auto,0,2,1,0)
#define DEE_PRIVATE_TYPEDEF_uint32_t        (auto,0,4,0,0)
#define DEE_PRIVATE_TYPEDEF_atomic_uint32_t (auto,0,4,1,0)
#define DEE_PRIVATE_TYPEDEF_uint64_t        (auto,0,8,0,0)
#define DEE_PRIVATE_TYPEDEF_atomic_uint64_t (auto,0,8,1,0)
#ifdef DEE_TYPES_SIZEOF_FLOAT
#define DEE_PRIVATE_TYPEDEF_float           (typedef(float),1,DEE_TYPES_SIZEOF_FLOAT,0,1)
#endif
#ifdef DEE_TYPES_SIZEOF_DOUBLE
#define DEE_PRIVATE_TYPEDEF_double          (typedef(double),1,DEE_TYPES_SIZEOF_DOUBLE,0,2)
#endif
#ifdef DEE_TYPES_SIZEOF_LDOUBLE
#define DEE_PRIVATE_TYPEDEF_ldouble         (typedef(long double),1,DEE_TYPES_SIZEOF_LDOUBLE,0,3)
#endif
";

function all(s) {
	for (fp: files) print fp: s;
}

function a(alias_name,old_name) {
	print f_members:   " DeeMemberType_"+alias_name,"=","DeeMemberType_"+old_name+",";
	print f_cast:      "#define DEE_PRIVATE_OBJECT_CAST_"+alias_name,"DEE_PRIVATE_OBJECT_CAST_"+old_name;
	print f_integer:   "#define DEE_PRIVATE_OBJECT_NEW_"+alias_name,"DEE_PRIVATE_OBJECT_NEW_"+old_name;
	print f_integer:   "#define DEE_PRIVATE_OBJECT_TYPE_"+alias_name,"DEE_PRIVATE_OBJECT_TYPE_"+old_name;
	print f_ctypes:    "#define DEE_PRIVATE_TYPEDEF_"+alias_name,"DEE_PRIVATE_TYPEDEF_"+old_name;
	if ("float" !in old_name && "double" !in old_name) {
		print f_integer:   "#define DEE_PRIVATE_OBJECT_NEW_atomic_"+alias_name,"DEE_PRIVATE_OBJECT_NEW_atomic_"+old_name;
		print f_integer:   "#define DEE_PRIVATE_OBJECT_TYPE_atomic_"+alias_name,"DEE_PRIVATE_OBJECT_TYPE_atomic_"+old_name;
		print f_ctypes:    "#define DEE_PRIVATE_TYPEDEF_atomic_"+alias_name,"DEE_PRIVATE_TYPEDEF_atomic_"+old_name;
	}
}

function d(tyname,is_signed,args...) {
	// Since we don't have defaults yet, this'll have to do
	safe = false;
	no_member = false;
	size_name = none;
	switch (#args) {
		case 3:
			no_member = args[2];
		case 2:
			safe = args[1];
		case 1:
			size_name = args[0];
			break;
	}
	if (safe) {
		print f_integer: "#ifdef",size_name;
		print f_cast: "#ifdef",size_name;
		print f_ctypes: "#ifdef",size_name;
		if (!no_member) print f_members: "#ifdef",size_name;
	}
	if (is_signed is string) {
		if (!no_member) print f_members: " DeeMemberType_"+tyname,"=","DeeMemberType_XINT("+is_signed+","+size_name+"),";
		print f_cast: "#define DEE_PRIVATE_OBJECT_CAST_"+tyname+"(tp_ob,ob,result)","DeeObject_CAST_XINT_F("+is_signed+","+size_name+")(tp_ob,ob,(DEE_TYPES_XINT("+is_signed+","+size_name+")*)(result))";
		print f_integer: "#define DEE_PRIVATE_OBJECT_NEW_"+tyname,"        DeeXINT_New_F("+is_signed+","+size_name+")";
		print f_integer: "#define DEE_PRIVATE_OBJECT_NEW_atomic_"+tyname," DeeAtomicXINT_New_F("+is_signed+","+size_name+")";
		print f_integer: "#define DEE_PRIVATE_OBJECT_TYPE_"+tyname,"       ((DeeTypeObject *)&DeeXINT_Type("+is_signed+","+size_name+"))";
		print f_integer: "#define DEE_PRIVATE_OBJECT_TYPE_atomic_"+tyname,"((DeeTypeObject *)&DeeAtomicXINT_Type("+is_signed+","+size_name+"))";
		print f_ctypes: "#define DEE_PRIVATE_TYPEDEF_"+tyname,"       (auto,"+is_signed+","+size_name+",0,0)";
		print f_ctypes: "#define DEE_PRIVATE_TYPEDEF_atomic_"+tyname,"(auto,"+is_signed+","+size_name+",1,0)";
	} else {
	if (!no_member) print f_members: " DeeMemberType_"+tyname,"=",(is_signed ? "DeeMemberType_INT" : "DeeMemberType_UINT")+"("+size_name+"),";
		print f_cast: "#define DEE_PRIVATE_OBJECT_CAST_"+tyname+"(tp_ob,ob,result)",(is_signed ? "DeeObject_CAST_INT_F" : "DeeObject_CAST_UINT_F")+"("+size_name+")(tp_ob,ob,("+(is_signed ? "DEE_TYPES_INT" : "DEE_TYPES_UINT")+"("+size_name+")*)(result))";
		print f_integer: "#define DEE_PRIVATE_OBJECT_NEW_"+tyname,(is_signed ? "DeeINT_New_F" : "DeeUINT_New_F")+"("+size_name+")";
		print f_integer: "#define DEE_PRIVATE_OBJECT_NEW_atomic_"+tyname,(is_signed ? "DeeAtomicINT_New_F" : "DeeAtomicUINT_New_F")+"("+size_name+")";
		print f_integer: "#define DEE_PRIVATE_OBJECT_TYPE_"+tyname,"((DeeTypeObject *)&"+(is_signed ? "DeeINT_Type" : "DeeUINT_Type")+"("+size_name+"))";
		print f_integer: "#define DEE_PRIVATE_OBJECT_TYPE_atomic_"+tyname,"((DeeTypeObject *)&"+(is_signed ? "DeeAtomicINT_Type" : "DeeAtomicUINT_Type")+"("+size_name+"))";
		print f_ctypes:  "#define DEE_PRIVATE_TYPEDEF_"+tyname,"       (auto,"+(is_signed?"1":"0")+","+size_name+",0,0)";
		print f_ctypes:  "#define DEE_PRIVATE_TYPEDEF_atomic_"+tyname,"(auto,"+(is_signed?"1":"0")+","+size_name+",1,0)";
	}
	if (safe) {
		if (!no_member) print f_members: "#endif";
		print f_ctypes: "#endif";
		print f_cast: "#endif";
		print f_integer: "#endif";
	}
}

a("__int8","int8_t");
a("__int16","int16_t");
a("__int32","int32_t");
a("__int64","int64_t");
a("int8","int8_t");
a("int16","int16_t");
a("int32","int32_t");
a("int64","int64_t");
a("uint8","uint8_t");
a("uint16","uint16_t");
a("uint32","uint32_t");
a("uint64","uint64_t");
a("Dee_int8_t","int8_t");
a("Dee_int16_t","int16_t");
a("Dee_int32_t","int32_t");
a("Dee_int64_t","int64_t");
a("Dee_uint8_t","uint8_t");
a("Dee_uint16_t","uint16_t");
a("Dee_uint32_t","uint32_t");
a("Dee_uint64_t","uint64_t");
d("char","DEE_TYPES_CHAR_SIGNED","DEE_TYPES_SIZEOF_CHAR",false,true);
d("wchar_t","DEE_TYPES_WCHAR_T_SIGNED","DEE_TYPES_SIZEOF_WCHAR_T");
d("char16_t","DEE_TYPES_CHAR16_T_SIGNED","DEE_TYPES_SIZEOF_CHAR16_T");
d("char32_t","DEE_TYPES_CHAR32_T_SIGNED","DEE_TYPES_SIZEOF_CHAR32_T");
d("schar",true,"DEE_TYPES_SIZEOF_CHAR");
d("uchar",false,"DEE_TYPES_SIZEOF_CHAR");
d("short",true,"DEE_TYPES_SIZEOF_SHORT");
d("ushort",false,"DEE_TYPES_SIZEOF_SHORT");
d("int",true,"DEE_TYPES_SIZEOF_INT");
d("uint",false,"DEE_TYPES_SIZEOF_INT");
d("long",true,"DEE_TYPES_SIZEOF_LONG");
d("ulong",false,"DEE_TYPES_SIZEOF_LONG");
d("llong",true,"DEE_TYPES_SIZEOF_LLONG",true);
d("ullong",false,"DEE_TYPES_SIZEOF_LLONG",true);
d("Dee_intmax_t",true,"DEE_TYPES_SIZEOF_INTMAX_T");
a("intmax_t","Dee_intmax_t");
d("Dee_uintmax_t",false,"DEE_TYPES_SIZEOF_INTMAX_T");
a("uintmax_t","Dee_uintmax_t");
d("Dee_intptr_t",true,"DEE_TYPES_SIZEOF_INTPTR_T");
a("intptr_t","Dee_intptr_t");
d("Dee_uintptr_t",false,"DEE_TYPES_SIZEOF_INTPTR_T");
a("uintptr_t","Dee_uintptr_t");
d("Dee_ptrdiff_t",true,"DEE_TYPES_SIZEOF_PTRDIFF_T");
a("ptrdiff_t","Dee_ptrdiff_t");
d("Dee_size_t",false,"DEE_TYPES_SIZEOF_SIZE_T");
a("size_t","Dee_size_t");
d("Dee_ssize_t",true,"DEE_TYPES_SIZEOF_SSIZE_T");
a("ssize_t","Dee_ssize_t");
d("DeeThreadID",false,"DEE_TYPES_SIZEOF_THREADID");
d("Dee_hash_t",false,"DEE_CONFIG_SIZEOF_DEE_HASH_T");
a("Dee_Utf8Char","char");
a("Dee_Utf16Char","uint16_t");
a("Dee_Utf32Char","uint32_t");
a("Dee_WideChar","wchar_t");
a("Dee_wchar_t","wchar_t");
d("Dee_rt_char","DEE_CONFIG_RT_CHAR_SIGNED","DEE_CONFIG_RT_SIZEOF_CHAR");
d("Dee_rt_wchar_t","DEE_CONFIG_RT_WCHAR_T_SIGNED","DEE_CONFIG_RT_SIZEOF_WCHAR_T");
d("Dee_rt_char16_t","DEE_CONFIG_RT_CHAR16_T_SIGNED","DEE_CONFIG_RT_SIZEOF_CHAR16_T");
d("Dee_rt_char32_t","DEE_CONFIG_RT_CHAR32_T_SIGNED","DEE_CONFIG_RT_SIZEOF_CHAR32_T");
d("Dee_rt_schar",true,"DEE_CONFIG_RT_SIZEOF_CHAR");
d("Dee_rt_uchar",false,"DEE_CONFIG_RT_SIZEOF_CHAR");
d("Dee_rt_short",true,"DEE_CONFIG_RT_SIZEOF_SHORT");
d("Dee_rt_ushort",false,"DEE_CONFIG_RT_SIZEOF_SHORT");
d("Dee_rt_intbool",true,"DEE_CONFIG_RT_SIZEOF_BOOL");
d("Dee_rt_uintbool",false,"DEE_CONFIG_RT_SIZEOF_BOOL");
d("Dee_rt_int",true,"DEE_CONFIG_RT_SIZEOF_INT");
d("Dee_rt_uint",false,"DEE_CONFIG_RT_SIZEOF_INT");
d("Dee_rt_long",true,"DEE_CONFIG_RT_SIZEOF_LONG");
d("Dee_rt_ulong",false,"DEE_CONFIG_RT_SIZEOF_LONG");
d("Dee_rt_llong",true,"DEE_CONFIG_RT_SIZEOF_LLONG");
d("Dee_rt_ullong",false,"DEE_CONFIG_RT_SIZEOF_LLONG");
d("Dee_rt_intmax_t",true,"DEE_CONFIG_RT_SIZEOF_INTMAX_T");
d("Dee_rt_uintmax_t",false,"DEE_CONFIG_RT_SIZEOF_INTMAX_T");
d("Dee_rt_size_t",false,"DEE_CONFIG_RT_SIZEOF_SIZE_T");
d("Dee_rt_ptrdiff_t",true,"DEE_CONFIG_RT_SIZEOF_PTRDIFF_T");
a("Dee_rt_int8_t","int8_t");
a("Dee_rt_int16_t","int16_t");
a("Dee_rt_int32_t","int32_t");
a("Dee_rt_int64_t","int64_t");
a("Dee_rt_uint8_t","uint8_t");
a("Dee_rt_uint16_t","uint16_t");
a("Dee_rt_uint32_t","uint32_t");
a("Dee_rt_uint64_t","uint64_t");
d("Dee_rt_int_fast8_t",true,"DEE_CONFIG_RT_SIZEOF_INT_FAST8_T");
d("Dee_rt_int_fast16_t",true,"DEE_CONFIG_RT_SIZEOF_INT_FAST16_T");
d("Dee_rt_int_fast32_t",true,"DEE_CONFIG_RT_SIZEOF_INT_FAST32_T");
d("Dee_rt_int_fast64_t",true,"DEE_CONFIG_RT_SIZEOF_INT_FAST64_T");
d("Dee_rt_int_least8_t",true,"DEE_CONFIG_RT_SIZEOF_INT_LEAST8_T");
d("Dee_rt_int_least16_t",true,"DEE_CONFIG_RT_SIZEOF_INT_LEAST16_T");
d("Dee_rt_int_least32_t",true,"DEE_CONFIG_RT_SIZEOF_INT_LEAST32_T");
d("Dee_rt_int_least64_t",true,"DEE_CONFIG_RT_SIZEOF_INT_LEAST64_T");
d("Dee_rt_uint_fast8_t",false,"DEE_CONFIG_RT_SIZEOF_INT_FAST8_T");
d("Dee_rt_uint_fast16_t",false,"DEE_CONFIG_RT_SIZEOF_INT_FAST16_T");
d("Dee_rt_uint_fast32_t",false,"DEE_CONFIG_RT_SIZEOF_INT_FAST32_T");
d("Dee_rt_uint_fast64_t",false,"DEE_CONFIG_RT_SIZEOF_INT_FAST64_T");
d("Dee_rt_uint_least8_t",false,"DEE_CONFIG_RT_SIZEOF_INT_LEAST8_T");
d("Dee_rt_uint_least16_t",false,"DEE_CONFIG_RT_SIZEOF_INT_LEAST16_T");
d("Dee_rt_uint_least32_t",false,"DEE_CONFIG_RT_SIZEOF_INT_LEAST32_T");
d("Dee_rt_uint_least64_t",false,"DEE_CONFIG_RT_SIZEOF_INT_LEAST64_T");

d("Dee_uid_t",false,"DEE_TYPES_SIZEOF_UID_T",true);
d("Dee_gid_t",false,"DEE_TYPES_SIZEOF_GID_T",true);
d("Dee_mode_t",false,"DEE_TYPES_SIZEOF_MODE_T",true);
a("uid_t","Dee_uid_t");
a("gid_t","Dee_gid_t");
a("mode_t","Dee_mode_t");
a("sa_family_t","ushort");
a("in_port_t","uint16_t");
d("pid_t",false,"DEE_TYPES_SIZEOF_PID_T",true);
d("socklen_t",true,"DEE_TYPES_SIZEOF_SOCKLEN_T",true);
d("useconds_t",true,"DEE_TYPES_SIZEOF_USECONDS_T",true);
d("off_t",true,"DEE_TYPES_SIZEOF_OFF_T",true);
d("off64_t",true,"DEE_TYPES_SIZEOF_OFF64_T",true);
d("time_t","DEE_TYPES_TIME_T_SIGNED","DEE_TYPES_SIZEOF_TIME_T");
a("Dee_time_t","time_t");

a("enum","int");
d("int_fast8_t",true,"DEE_TYPES_SIZEOF_INT_FAST8_T");
d("int_fast16_t",true,"DEE_TYPES_SIZEOF_INT_FAST16_T");
d("int_fast32_t",true,"DEE_TYPES_SIZEOF_INT_FAST32_T");
d("int_fast64_t",true,"DEE_TYPES_SIZEOF_INT_FAST64_T");
d("int_least8_t",true,"DEE_TYPES_SIZEOF_INT_LEAST8_T");
d("int_least16_t",true,"DEE_TYPES_SIZEOF_INT_LEAST16_T");
d("int_least32_t",true,"DEE_TYPES_SIZEOF_INT_LEAST32_T");
d("int_least64_t",true,"DEE_TYPES_SIZEOF_INT_LEAST64_T");
d("uint_fast8_t",false,"DEE_TYPES_SIZEOF_INT_FAST8_T");
d("uint_fast16_t",false,"DEE_TYPES_SIZEOF_INT_FAST16_T");
d("uint_fast32_t",false,"DEE_TYPES_SIZEOF_INT_FAST32_T");
d("uint_fast64_t",false,"DEE_TYPES_SIZEOF_INT_FAST64_T");
d("uint_least8_t",false,"DEE_TYPES_SIZEOF_INT_LEAST8_T");
d("uint_least16_t",false,"DEE_TYPES_SIZEOF_INT_LEAST16_T");
d("uint_least32_t",false,"DEE_TYPES_SIZEOF_INT_LEAST32_T");
d("uint_least64_t",false,"DEE_TYPES_SIZEOF_INT_LEAST64_T");
d("DeeProcessID",false,"DEE_TYPES_SIZEOF_DEE_PROCESS_ID",true);
d("DeeProcessReturn",false,"DEE_TYPES_SIZEOF_DEE_PROCESS_RETURN",true);
d("DeeProcessHandle",false,"DEE_TYPES_SIZEOF_DEE_PROCESS_HANDLE",true);

// Type aliases
a("DeeExceptionHandlerKind","int");
a("DeeFunctionFlags","int16_t");
a("DeeExprAstKind", "int");
a("DeeStmtAstKind", "enum");
a("DeeAstAttribute","uint32_t");
a("DeeXAstKind",    "uint32_t");
a("DeeSAstKind",    "uint32_t");
a("TPPTokenID",     "int");
a("DeeThreadState", "uint8_t");
a("DeeSempahoreCount","ulong");
a("DeeMarshalVersion","uint16_t");
a("TPP_rt_int8_t",  "int8_t");
a("TPP_rt_int16_t", "int16_t");
a("TPP_rt_int32_t", "int32_t");
a("TPP_rt_int64_t", "int64_t");
a("TPP_rt_uint8_t", "uint8_t");
a("TPP_rt_uint16_t","uint16_t");
a("TPP_rt_uint32_t","uint32_t");
a("TPP_rt_uint64_t","uint64_t");
a("TPP_rt_int",     "Dee_rt_int");
a("TPP_rt_uint",    "Dee_rt_uint");
a("TPP_rt_long",    "Dee_rt_long");
a("TPP_rt_ulong",   "Dee_rt_ulong");
a("TPP_rt_llong",   "Dee_rt_llong");
a("TPP_rt_ullong",  "Dee_rt_ullong");
a("TPP_rt_char",    "Dee_rt_char");
a("TPP_rt_wchar_t", "Dee_rt_wchar_t");
a("TPP_rt_char16_t","Dee_rt_char16_t");
a("TPP_rt_char32_t","Dee_rt_char32_t");

all("#ifdef DEE_TYPES_SIZEOF_INT");
a("signed","int");
a("unsigned","uint");
a("sint","int");
a("signed_int","int");
a("unsigned_int","uint");
a("u_int","uint");
all("#endif");

all("#ifdef DEE_TYPES_SIZEOF_CHAR");
a("signed_char","schar");
a("unsigned_char","uchar");
a("u_char","uchar");
all("#endif");

all("#ifdef DEE_TYPES_SIZEOF_SHORT");
a("sshort","short");
a("signed_short","short");
a("unsigned_short","ushort");
a("u_short","ushort");
all("#endif");

all("#ifdef DEE_TYPES_SIZEOF_LONG");
a("slong","long");
a("signed_long","long");
a("unsigned_long","ulong");
a("u_long","ulong");
all("#endif");

all("#ifdef DEE_TYPES_SIZEOF_LLONG");
a("sllong","llong");
a("signed_llong","llong");
a("unsigned_llong","ullong");
a("long_long","llong");
a("slong_long","llong");
a("signed_long_long","llong");
a("ulong_long","ullong");
a("unsigned_long_long","ullong");
all("#endif");

all("#ifdef DEE_TYPES_SIZEOF_LDOUBLE");
a("long_double","ldouble");
all("#endif");


#if 1
// Internal Linux types
a("__u8","uint8_t");
a("__u16","uint16_t");
a("__u32","uint32_t");
a("__u64","uint64_t");
a("__s8","int8_t");
a("__s16","int16_t");
a("__s32","int32_t");
a("__s64","int64_t");
a("__u_char","uchar");
a("__u_short","ushort");
a("__u_int","uint");
a("__u_long","ulong");
a("__quad_t","int64_t");
a("__u_quad_t","uint64_t");
a("__int8_t","int8_t");
a("__int16_t","int16_t");
a("__int32_t","int32_t");
a("__int64_t","int64_t");
a("__uint8_t","uint8_t");
a("__uint16_t","uint16_t");
a("__uint32_t","uint32_t");
a("__uint64_t","uint64_t");
a("__ssize_t","Dee_ssize_t");
a("__intptr_t","intptr_t");
a("__u_intptr_t","uintptr_t");
#endif

// Put some type aliases for windows
all("#ifdef DEE_PLATFORM_WINDOWS");
a("BYTE","uint8_t");
a("WORD","uint16_t");
a("SHORT","short");
a("USHORT","uint16_t");
a("INT","int");
a("UINT","uint");
a("LONG","long");
a("ULONG","ulong");
a("CHAR","char");
a("UCHAR","uchar");
a("WCHAR","ushort");
a("BOOL","long");
a("INT32","int32_t");
a("INT64","int64_t");
a("UINT32","uint32_t");
a("UINT64","uint64_t");
a("FLOAT","float");
a("DOUBLE","double");
a("INT_PTR","intptr_t");
a("UINT_PTR","uintptr_t");
a("LONG_PTR","intptr_t");
a("ULONG_PTR","uintptr_t");
a("DWORD","ulong");
a("DWORD64","uint64_t");
a("WPARAM","UINT_PTR");
a("LPARAM","ULONG_PTR");
a("LRESULT","ULONG_PTR");
a("HRESULT","long");
a("HFILE","INT");
a("COLORREF","DWORD");
a("CLIPFORMAT","WORD");
a("VARTYPE","ushort");
a("PROPID","ULONG");
a("SIZE_T","ULONG_PTR");
a("SSIZE_T","LONG_PTR");
a("DWORD_PTR","ULONG_PTR");
all("#ifdef DEE_TYPES_SIZEOF_LLONG");
a("LONGLONG","llong");
a("ULONGLONG","ullong");
all("#else");
a("LONGLONG","int64_t");
a("ULONGLONG","uint64_t");
all("#endif");
a("BOOLEAN","BYTE");
a("LONG64","int64_t");
a("ULONG64","uint64_t");
a("ATOM","WORD");
a("LCID","DWORD");
a("LANGID","USHORT");
a("LGRPID","DWORD");
a("LCTYPE","DWORD");
a("CALID","DWORD");
a("CALTYPE","DWORD");
a("GEOID","LONG");
a("GEOTYPE","DWORD");
a("GEOCLASS","DWORD");
all("#endif");




print f_ctypes: "\
#define DEE_PRIVATE_TYPEDEF_atomic(x) DEE_PRIVATE_TYPEDEF_atomic_##x

#define DEE_PRIVATE_TD_TYPE2_ignored(signed,sizeof)
#define DEE_PRIVATE_TD_TYPE_auto       DEE_TYPES_XINT
#define DEE_PRIVATE_TD_TYPE_typedef(T) T DEE_PRIVATE_TD_TYPE2_ignored
#define DEE_PRIVATE_TD_TYPE2(typedef,signed,sizeof,atomic) DEE_PRIVATE_TD_TYPE_##typedef(signed,sizeof)
#define DEE_PRIVATE_TD_SIZEOF2(typedef,signed,sizeof,atomic,float)  sizeof
#define DEE_PRIVATE_TD_SIGNED2(typedef,signed,sizeof,atomic,float)  signed
#define DEE_PRIVATE_TD_ATOMIC2(typedef,signed,sizeof,atomic,float)  atomic
#define DEE_PRIVATE_TD_FLOATID2(typedef,signed,sizeof,atomic,float) float
#define DEE_PRIVATE_TD_EVAL2(x)   x
#define DEE_PRIVATE_TD_EVAL(x)    DEE_PRIVATE_TD_EVAL2(x)
#define DEE_PRIVATE_TD_TYPE(T)    DEE_PRIVATE_TD_EVAL(DEE_PRIVATE_TD_TYPE2 DEE_PRIVATE_TYPEDEF_##T)
#define DEE_PRIVATE_TD_SIZEOF(T)  DEE_PRIVATE_TD_EVAL(DEE_PRIVATE_TD_SIZEOF2 DEE_PRIVATE_TYPEDEF_##T)
#define DEE_PRIVATE_TD_SIGNED(T)  DEE_PRIVATE_TD_EVAL(DEE_PRIVATE_TD_SIGNED2 DEE_PRIVATE_TYPEDEF_##T)
#define DEE_PRIVATE_TD_ATOMIC(T)  DEE_PRIVATE_TD_EVAL(DEE_PRIVATE_TD_ATOMIC2 DEE_PRIVATE_TYPEDEF_##T)
#define DEE_PRIVATE_TD_FLOATID(T) DEE_PRIVATE_TD_EVAL(DEE_PRIVATE_TD_FLOATID2 DEE_PRIVATE_TYPEDEF_##T)

//////////////////////////////////////////////////////////////////////////
// typename DEE_TYPEDEF_TYPE(deemon_typename T)
// >> Returns a set of tokens that can be used as a regular type name for 'T'
#define DEE_TYPEDEF_TYPE(T)     DEE_PRIVATE_TD_TYPE(T)

//////////////////////////////////////////////////////////////////////////
// Integral DEE_TYPEDEF_SIZEOF(deemon_typename T)
// >> Returns an integral token describing the size of 'T'
#define DEE_TYPEDEF_SIZEOF(T)   DEE_PRIVATE_TD_SIZEOF(T)

//////////////////////////////////////////////////////////////////////////
// Boolean DEE_TYPEDEF_SIGNED(deemon_typename T)
// >> Returns a token '1' if 'T' describes a signed type. Returns '0' otherwise
#define DEE_TYPEDEF_SIGNED(T)   DEE_PRIVATE_TD_SIGNED(T)

//////////////////////////////////////////////////////////////////////////
// Boolean DEE_TYPEDEF_ATOMIC(deemon_typename T)
// >> Returns a token '1' if 'T' describes an atomic type. Returns '0' otherwise
#define DEE_TYPEDEF_ATOMIC(T)   DEE_PRIVATE_TD_ATOMIC(T)

//////////////////////////////////////////////////////////////////////////
// Boolean DEE_TYPEDEF_FLOAT(deemon_typename T)
// >> Returns a token '1', '2' or '3' if 'T' describes an floating type. Returns '0' otherwise
#define DEE_TYPEDEF_FLOATID(T)   DEE_PRIVATE_TD_FLOATID(T)

#endif /* !GUARD_DEEMON___CTYPES_INL */
";





