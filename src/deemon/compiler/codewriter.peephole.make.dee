#!/usr/bin/deemon
// The following copyright also applies to this file
const copyright = "\
/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the \"Software\"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */
";

#include <fs>
#include <file>
#include <util>
#include <error>
fs::chdir(fs::path::head(__FILE__));


file.io.stdout = file.io("codewriter.peephole.generated.inl","w");

const indent = " ";
local dict opcode2name,name2opcode;

for (local line: file.io("__opcode.inl")) {
	local name,value;
	try name,value = line.scanf(" # define %[A-Za-z0-9_] %[A-Za-z0-9_()| ]")...;
	catch (...) continue;
	name = name.strip();
	value = value.strip();
	if (name.wmatch("v*_OP*")) {
		// Deprecated opcodes
		continue;
	} else if (name.startswith("DEE_")) {
		continue;
	}
	
	if (name.startswith("OPFLAG") || name.startswith("GUARD")) continue;
	if (name in ["OPREG","OPARG","OPEXT"]) continue;
	
	try value = (int)value;
	catch (...) {
		try {
			local group;
			group,value = value.scanf(" %[A-Za-z0-9_] ( %[XxA-Fa-f0-9] )")...;
			switch (group) {
				case "OPREG": value = ((int)value); break;
				case "OPARG": value = ((int)value)|0x80; break;
				case "OPEXT": value = ((int)value); break;
				default:
					print file.io.stderr: "Unknown opcode id group:",repr group;
					break;
			}
		} catch (...) {
			print file.io.stderr: repr name,repr value;
			if (value in name2opcode) continue;
			throw;
		}
	}
	if (name.startswith("OP_")) {
		opcode2name[value] = name;
		name2opcode[name] = value;
	} else if (name.startswith("OPEXT_")) {
		continue;
	} else {
		print file.io.stderr: "Unknown opcode group:",repr name,"=",repr value;
	}
}

local list rules;
function get_effective_size(l): result {
	result = 0;
	for (local part: l) {
		if ("[" in part) {
			result += 3;
		} else if (part.startswith("$")) {
			result += 2;
		} else if (!part.endswith("...")) {
			result += 1;
		}
	}
}

function parse_oplist(text) {
	text = text.strip()
		.replace("(","")
		.replace(")","");
	while (1) {
		local newtext = text
			.replace(" |","|")
			.replace("| ","|")
		;
		if (newtext == text) break;
		text = newtext;
	}
	result = text.split(",");
	result = result.transform([](x) -> x.strip());
	result = result.locate_all([](x) -> x);
	return result;
}

class oprule {
	this(file,line,text) {
		this.file = file;
		this.line = line;
		local input,output = text.scanf("{%[^}]} --> {%[^}]}")...;
		this.input = parse_oplist(input);
		this.output = parse_oplist(output);
		this.opcode_name = this.input.front();
		if ("[" in this.opcode_name) this.opcode_name = this.opcode_name.partition("[")[0].strip();
		this.opcode_id = name2opcode[this.opcode_name];
		this.effective_fromsize = get_effective_size(this.input);
		this.effective_tosize = get_effective_size(this.output);
		if (this.effective_tosize > this.effective_fromsize) {
			throw Error(file+"("+line+") : Error : Rule output is greater than the input");
		}
		while (this.effective_tosize < this.effective_fromsize) {
			this.output.append("OP_NOOP");
			++this.effective_tosize;
		}
	}
	function input_desc() -> ",".join(this.input);
	function output_desc() -> ",".join(this.output);
};


#define __RULE(...) rules.append(oprule(__FILE__,__LINE__,#__VA_ARGS__))
#define RULE(...) __RULE(__VA_ARGS__)
#include "codewriter.peephole.rules.inl"
#undef __RULE
#undef RULE

local main_switch = [none]*256;
for (local rule: rules) {
	if (main_switch[rule.opcode_id] is none)
		main_switch[rule.opcode_id] = list();
	main_switch[rule.opcode_id].append(rule);
}

local label_count = 0;
function get_label_name() {
	return "local_label_"+label_count++;
}

print copyright;
for (local i,oprules: util::enumerate(main_switch)) {
	if (!oprules) continue;
	local i_name = opcode2name[i];
	print "#ifdef",i_name;
	print indent+"TARGET("+opcode2name[i]+") {";
	for (local r: oprules) {
		print indent+indent+"RULE("+repr r.input_desc()+",";
		print indent+indent+"     "+repr r.output_desc()+") {";
		local dict total_arg_name_uses;
		for (local arg: r.input) {
			if (arg.startswith("$")) {
				arg = arg[1:];
				if (arg in total_arg_name_uses) ++total_arg_name_uses[arg];
				else total_arg_name_uses[arg] = 1;
			}
		}
		for (local arg: r.output) {
			if (arg.startswith("$")) {
				arg = arg[1:];
				if (arg in total_arg_name_uses) ++total_arg_name_uses[arg];
				else throw Error("Output uses argument "+repr arg+" not specified by input");
			}
		}
		local used_args = [(for (local name,uses: total_arg_name_uses) if (uses > 1) name)...];
		if (used_args) print indent+indent+indent+"Dee_uint16_t",",".join(used_args)+";";
		local list used_arg_names;
		local input_copy = copy r.input;
		if ("[" in input_copy.front()) {
			local none,none,arg = input_copy.front().partition("[")...;
			arg = arg.replace("]","").strip();
			print indent+indent+indent+"if (RT_READ_ARG() != "+arg+") RULE_BREAK();";
		}
		input_copy.pop_front();
		local has_seek_first_op = false;
		while (input_copy) {
			local opname = input_copy.pop_front();
			if (opname.startswith("$")) {
				opname = opname[1:];
				if (total_arg_name_uses[opname] <= 1) {
					// Placeholder argument (skip)
					print indent+indent+indent+"RT_SKIP_ARG(); //",opname;
				} else if (opname !in used_arg_names) {
					// First use (initialize input oparg)
					print indent+indent+indent+opname,"= RT_READ_ARG();";
					used_arg_names.append(opname);
				} else {
					// Additional use (check if the argument matches)
					print indent+indent+indent+"if ("+opname+" != RT_READ_ARG()) RULE_BREAK();";
				}
			} else if (opname.endswith("...")) {
				local loop_label = get_label_name();
				if (!has_seek_first_op) {
					print indent+indent+indent+"RT_SEEK_FIRST_OP();";
					has_seek_first_op = true;
				}
				print indent+indent+indent+"{";
				print loop_label+":";
				print indent+indent+indent+indent+"if (RT_PROTECTED()) RULE_BREAK();";
				print indent+indent+indent+indent+"if ("+" || ".join(
					for (local a: opname[:#opname-3].split("|"))
						"RT_GET_OP() == "+a)+") { RT_NEXT_OP(); goto",loop_label+"; }";
				print indent+indent+indent+"}";
			} else if ("[" in opname) {
				local opcode,none,arg = opname.partition("[")...;
				arg = arg.replace("]","").strip();
				if (!has_seek_first_op) {
					print indent+indent+indent+"RT_SEEK_FIRST_OP();";
					has_seek_first_op = true;
				}
				print indent+indent+indent+"if (RT_PROTECTED() || RT_GET_OP() != "+opcode+" || "
				                               "RT_GET_OPARG() != "+arg+") RULE_BREAK();",;
				if (input_copy) print " RT_NEXT_OP_ARG();",;
				print;
			} else {
				if (!has_seek_first_op) {
					print indent+indent+indent+"RT_SEEK_FIRST_OP();";
					has_seek_first_op = true;
				}
				print indent+indent+indent+"if (RT_PROTECTED() || ("+
					" && ".join(for (local a: opname.split("|")) "RT_GET_OP() != "+a)+
					")) RULE_BREAK();",;
				if (input_copy) print " RT_NEXT_OP();",;
				print;
			}
		}
		// All rules match!
		if (r.output) {
			print indent+indent+indent+"RT_WRITE_BEGIN();";
			local input_copy = copy(r.input);
			//local input_copy = copy(r.input).locate_all([](x) -> !x.endswith("..."));
			function input_consume(ipt) {
				if (ipt is none) return input_copy.pop_front();
				if (ipt.startswith("$")) return ipt[1:];
				if ("[" in ipt) return "$"+ipt.partition("[")[2].replace("]","").strip();
				return none;
			}
			local cur_input = none;
			for (local o: r.output) {
				if (cur_input is none) cur_input = input_copy.pop_front();
				if (o.startswith("$")) {
					if (cur_input == o) {
						print indent+indent+indent+"RT_WRITE_SKIPARG();";
					} else {
						print indent+indent+indent+"RT_WRITE_ARG("+o[1:]+");";
					}
					cur_input = input_consume(cur_input);
					cur_input = input_consume(cur_input);
				} else if (o.endswith("...")) {
					print indent+indent+indent+"while ("+
						" || ".join(for (local x: o[:#o-3].split("|"))
							"RT_WRITE_GETOP() == "+x
						)+") { RT_WRITE_SKIPOP(); }";
					if (!cur_input.endswith("...")) {
						throw Error("Expected *... input for *... output, but got "+repr cur_input);
					}
					cur_input = none;
				} else if (o == "*") {
					print indent+indent+indent+"RT_WRITE_SKIPOP();";
					cur_input = input_consume(cur_input);
				} else if ("[" in o) {
					if (cur_input == o) {
						print indent+indent+indent+"RT_WRITE_SKIPOPARG();";
					} else {
						local opcode,none,arg = o.partition("[")...;
						arg = arg.replace("]","").strip();
						print indent+indent+indent+"RT_WRITE_OP("+opcode+");";
						print indent+indent+indent+"RT_WRITE_ARG("+arg+");";
					}
					cur_input = input_consume(cur_input);
					cur_input = input_consume(cur_input);
					cur_input = input_consume(cur_input);
				} else {
					if (cur_input == o) {
						print indent+indent+indent+"RT_WRITE_SKIPOP();";
					} else {
						print indent+indent+indent+"RT_WRITE_OP("+o+");";
					}
					cur_input = input_consume(cur_input);
				}
			}
		}
		print indent+indent+indent+"DISPATCH_OPTIMIZED();";
		print indent+indent+"}";
	}
	if (i_name in [
		"OP_LOAD_LOC","OP_LOAD_REF",
		"OP_LOAD_CST","OP_LOAD_CST_COPY",
		"OP_LOAD_CST_DCOPY","OP_LOAD_CST_LOCKED",
		"OP_LOAD_BLTIN","OP_LOAD_ARG",
		"OP_LOAD_RET","OP_LOAD_THIS",
		"OP_LOAD_NONE",
	]) {
		print indent+indent+"DISPATCH_AFTERLOAD();";
	} else {
		print indent+indent+"DISPATCH();";
	}
	print indent+"}";
	print "#endif /*",i_name,"*/";
	print;
}





















