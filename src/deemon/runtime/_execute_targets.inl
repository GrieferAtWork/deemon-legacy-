/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */
/*[[[deemon
const TARGET_PREFIX = "TARGET_";
const UNKNOWN_TARGET = "_unknown_target";

#include <file>
#include <fs>
fs::chdir(fs::path::head(__FILE__));
local opcodes = [none]*256;
for (local line: file.io("../compiler/__opcode.inl","r")) {
  local name,code;
  try {
    name,code = line.scanf(" # define %s %[Xx0-9]")...;
  } catch (...) {
    try {
      name,code = line.scanf(" # define %s %[Xx0-9]")...;
    } catch (...) {
      continue;
    }
  }
  try code = (int)code;
  catch (...) continue;
  if (name.startswith("OP_") && code < 256) {
    print file.io.stderr: name,code;
    opcodes[code] = name;
  }
}

print "static void *exec_targets[256] = {";
for (local target: opcodes) {
  if (target is none) target = UNKNOWN_TARGET;
  else target = TARGET_PREFIX+target;
  print " &&"+target+",";
}
print "};";

]]]*/
static void *exec_targets[256] = {
 &&TARGET_OP_IS,
 &&TARGET_OP_ADD,
 &&TARGET_OP_OR,
 &&TARGET_OP_SEQ_RANGE_GET,
 &&TARGET_OP_CAST_LIST,
 &&TARGET_OP_PRINT_ONE_F,
 &&TARGET_OP_RROT_3,
 &&TARGET_OP_YIELDALL,
 &&TARGET_OP_YIELDSTOP,
 &&TARGET_OP_LOAD_NONE,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&TARGET_OP_IN,
 &&TARGET_OP_CALL,
 &&TARGET_OP_COPY_ASSIGN,
 &&TARGET_OP_STR,
 &&TARGET_OP_REPR,
 &&TARGET_OP_NOT,
 &&TARGET_OP_POS,
 &&TARGET_OP_NEG,
 &&TARGET_OP_REF,
 &&TARGET_OP_DEREF,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&TARGET_OP_INPLACE_ADD,
 &&TARGET_OP_SUB,
 &&TARGET_OP_INPLACE_SUB,
 &&TARGET_OP_MUL,
 &&TARGET_OP_INPLACE_MUL,
 &&TARGET_OP_DIV,
 &&TARGET_OP_INPLACE_DIV,
 &&TARGET_OP_MOD,
 &&TARGET_OP_INPLACE_MOD,
 &&TARGET_OP_SHL,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&TARGET_OP_INPLACE_OR,
 &&TARGET_OP_XOR,
 &&TARGET_OP_INPLACE_XOR,
 &&TARGET_OP_POW,
 &&TARGET_OP_INPLACE_POW,
 &&TARGET_OP_CMP_LO,
 &&TARGET_OP_CMP_LE,
 &&TARGET_OP_CMP_EQ,
 &&TARGET_OP_CMP_NE,
 &&TARGET_OP_CMP_GR,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&TARGET_OP_SEQ_RANGE_DEL,
 &&TARGET_OP_SEQ_RANGE_SET,
 &&TARGET_OP_SEQ_ITER_SELF,
 &&TARGET_OP_ATTR_GET,
 &&TARGET_OP_ATTR_DEL,
 &&TARGET_OP_ATTR_SET,
 &&TARGET_OP_ROT_2,
 &&TARGET_OP_LROT_3,
 &&TARGET_OP_TRY_END,
 &&TARGET_OP_EXCEPT_END,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&TARGET_OP_CAST_TUPLE,
 &&_unknown_target,
 &&TARGET_OP_LOAD_RET,
 &&TARGET_OP_STORE_RET,
 &&TARGET_OP_STORE_RET_POP,
 &&TARGET_OP_UNREACHABLE,
 &&TARGET_OP_LOAD_THIS,
 &&TARGET_OP_DUP,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&TARGET_OP_PRINT_ONE_F_SEP,
 &&TARGET_OP_PRINT_ONE_F_END,
 &&TARGET_OP_PRINT_ALL,
 &&TARGET_OP_PRINT_ALL_SEP,
 &&TARGET_OP_PRINT_ALL_END,
 &&TARGET_OP_PRINT_ALL_F,
 &&TARGET_OP_PRINT_ALL_F_SEP,
 &&TARGET_OP_PRINT_ALL_F_END,
 &&TARGET_OP_PRINT_END,
 &&TARGET_OP_PRINT_END_F,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&TARGET_OP_RROT_4,
 &&TARGET_OP_CAST_SET,
 &&TARGET_OP_LOAD_EXTERN,
 &&TARGET_OP_LOAD_AUTOEXTERN,
 &&TARGET_OP_FF_CLOSURE,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
 &&_unknown_target,
};
//[[[end]]]

