#!/usr/bin/deemon
const copyright="\
# Copyright (c) 2016 - deemon by Griefer@Work
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the \"Software\"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
";

// make a make to make deemon from a make file. - MAKE MAKE MAKE MAKE!

#include <fs>
#include <file>

#include "../include/deemon/version.h"

fs.chdir(fs.path.head(__FILE__));

const source_extensions = [".c"];
const ignored_paths = ["tpp","libffi","libffi_linux","libffi_msvc","ancestory"];

function find_source_files;
function find_source_files(path) {
	path = fs.path.abs(path);
	try for (f: fs.dir(path)) {
		if (f in ignored_paths) continue;
		f = fs.path.join(path,f);
		if (fs.isdir(f))
			yield find_source_files(f)...;
		if (fs.isfile(f) && fs.path.ext(f) in source_extensions)
			yield fs.path.rel(f);
	} catch (...);
}


const warnings = ["no-unused-result"];
const source_libs = ["ffi","dl","m","rt"];
const lib_paths = ["src/deemon/runtime/libffi_linux/.source_libs/"];
const source_defines = ["DEE_USE_DEBUG_NEW","DEE_LINK_DLL_EXPORT","DEBUG_NEW_CONFIG_LINK_DLLEXPORT"];
const include_paths = ["include","src/deemon/runtime/libffi_linux/include","src/debug_new","src/tpp","src"];

build_files = [];
out = file::io("../make.sh","w");
fs::chmod(out,0775);

print out: "#!/bin/bash";
print out: copyright;
print out: "# +-- THIS IS AN AUTOGENERATED FILE --+";
print out: "#     To modify this file, please";
print out: "#       edit 'src/makemake.dee'";
print out: "# +-----------------------------------+";
print out:;
print out: "compiler=\"gcc\"";
print out: "root_path=$(dirname `readlink -f \"$0\"`)";
print out: "source_path=\"$root_path/src\"";
print out: "basic_build_path=\"$root_path/build/linux\"";
print out: "libffi_path=\"$source_path/deemon/runtime/libffi_linux\"";
print out:;
print out: "basic_libname=\"libdeemon.so."+DEE_VERSION_API+"\"";
print out: "basic_binname=\"deemon."+DEE_VERSION_COMPILER+"\"";
print out: "update_alternatives_libname=\"libdeemon."+DEE_VERSION_API+"\"";
print out: "update_alternatives_binname2=\"deemon."+DEE_VERSION_COMPILER+"\"";
print out: "update_alternatives_binname=\"deemon\"";
print out:;
print out: "full_libname=\"$basic_libname."+DEE_VERSION_COMPILER+"\"";
print out: "full_binname=\"$basic_binname."+DEE_VERSION_API+"\"";
print out: "lib_outputfile=\"$root_path/$full_libname\"";
print out: "bin_outputfile=\"$root_path/$basic_binname\"";
print out: "# v This is hardcoded in deemon (to change you must modify 'src/deemon/lexer.c')";
print out: "include_libpath=\"/usr/lib/deemon\"";
print out:;
print out: "source_defines="+repr(" ".join(source_defines.transform([](x) -> "-D"+x)));
print out: "source_have_defines=\"\"";
print out: "source_includes="+repr(" ".join(include_paths.transform([](x) -> "-I$root_path/"+x)));
print out: "source_libs=\"\"";
print out: "source_flags_raw=\"\"";
print out: "source_libpaths=\"\"";
print out: "source_link_libs="+repr(" ".join(source_libs.transform([](x) -> "-l"+x)));
print out: "source_link_flags=\"-pthread\"";
print out: "source_link_libpaths=\"-L$libffi_path/.libs\"";
print out: "frontend_defines=\"-DDEE_LINK_DLL_IMPORT\"";
print out: "frontend_includes=\"-I$root_path/include\"";
print out: "frontend_flags_raw=\"\"";
print out: "frontend_libs=\"$lib_outputfile\"";
//print out: "frontend_libs=\"./$full_libname\"";
print out: "frontend_libpaths=\"-L`dirname $lib_outputfile`\"";
print out:;
print out: "install_lib_path=\"/usr/lib\"";
print out: "install_bin_path=\"/usr/bin\"";
print out:;
print out: "flags_debug=\"-g -D_DEBUG\"";
print out: "flags_ndebug=\"-O3 -DNDEBUG\"";
print out:;
print out: "compile_force=0";
print out: "compile_all_deemon=0";
print out: "compile_all_libffi=0";
print out: "verbose=0";
print out: "changed_files=0";
print out: "link_staticly=0";
print out:;
print out: "source_flags=\"\"";
print out: "frontend_flags=\"\"";
print out: "set_any_source_flags() {";
print out: "	source_flags=\"$source_flags_raw $1\"";
print out: "	frontend_flags=\"$frontend_flags_raw $1\"";
print out: "}";
print out:;


print out: "# Calculate the compiler #include <...> path";
print out: "compiler_includepath=\"\"";
print out: "inpaths=0";
print out: "for line in $(echo | cpp -Wp,-v 2>&1); do";
print out: "	if [[ $inpaths != 0 ]]; then";
print out: "		if [[ \"$line\" == \"End\"* ]]; then";
print out: "			inpaths=0";
print out: "		elif [ -d \"$line\" ]; then";
print out: "			if [ \"$compiler_includepath\" != \"\" ]; then";
print out: "				LF=$'\\n'";
print out: "				compiler_includepath=\"$compiler_includepath$LF$line\"";
print out: "			else";
print out: "				compiler_includepath=\"$line\"";
print out: "			fi";
print out: "		fi";
print out: "	else";
print out: "		if [[ \"$line\" == *\"#include\"* ]]; then";
print out: "			inpaths=1";
print out: "		fi";
print out: "	fi";
print out: "done";
print out: "unset inpaths";
print out:;
print out: "check_include_available() {";
print out: "	for line in $compiler_includepath; do";
print out: "		if [ -f \"$line/$1\" ]; then";
print out: "			have_name=$(echo \"${1/./_}\")";
print out: "			have_name=$(echo \"${have_name/'/'/_}\")";
print out: "			have_name=$(echo \"$have_name\" | awk '{print toupper($0)}')";
print out: "			source_have_defines=\"$source_have_defines -DHAVE_$have_name\"";
print out: "			break";
print out: "		fi";
print out: "	done";
print out: "}";
print out:;
// Add include checks for all files from <deemon/__features.inl>
found_files = [];
for (local l: file.io("../include/deemon/__features.inl")) {
	local none,none,defname = l.strip().partition("__has_include")...;
	try defname = defname.scanf(" ( <%[^>]> )")...;
	catch (...) continue; // If the scanf fails, ignore this occurrance
	defname = defname.strip();
	if (defname !in found_files) found_files.append(defname);
}
for (x: found_files.sorted())
	print out: "check_include_available "+repr x;
print out:;
print out: "# Update the list of source defines with the set of available includes";
print out: "source_defines=\"$source_defines $source_have_defines\"";
print out:;
print out: "# Debug configuration";
print out: "build_path=\"\"";
print out: "additional_flags=\"\"";
print out: "make_debug_build=\"\"";
print out: "dependency_path=\"\"";
print out:;
print out: "set_debug_mode() {";
print out: "	if [ $1 != 0 ]; then";
print out: "		make_debug_build=\"1\"";
print out: "		build_path=\"$basic_build_path/debug\"";
print out: "		additional_flags=\"$flags_debug\"";
print out: "	else";
print out: "		make_debug_build=\"0\"";
print out: "		build_path=\"$basic_build_path/release\"";
print out: "		additional_flags=\"$flags_ndebug\"";
print out: "	fi";
print out: "	dependency_path=\"$build_path/dependencies\"";
print out: "}";
print out:;
print out: "# Default to enabling debug mode for now";
print out: "# >> Once deemon gets really stable, this default will change";
print out: "set_debug_mode 1";
print out:;
print out: "check_compiler() {";
print out: "	if [ \"`which $compiler`\" == \"\" ]; then";
print out: "		echo \"ERROR : Configured compiler not installed: $compiler\"";
print out: "		if [ \"$compiler\" == \"gcc\" ]; then";
print out: "			echo \"Fix this problem by typing: 'sudo apt-get install gcc'\"";
print out: "		elif [ \"$compiler\" == \"g++\" ]; then";
print out: "			echo \"Fix this problem by typing: 'sudo apt-get install g++'\"";
print out: "		fi";
print out: "		exit 1";
print out: "	fi";
print out: "}";
print out:;
print out: "compile_libffi() {";
print out: "	# Make sure that libffi is compiled";
print out: "	if [ $compile_all_libffi == 1 ] || \\";
print out: "	 ! [ -f $libffi_path/include/ffi.h ]; then";
print out: "		cd $libffi_path";
print out: "		chmod +x clean_libffi.sh";
print out: "		chmod +x make_libffi.sh";
print out: "		bash ./clean_libffi.sh";
print out: "		bash ./make_libffi.sh";
print out: "		make";
print out: "		cd $root_path";
print out: "	fi";
print out: "}";
print out: "make_libffi() {";
print out: "	compile_libffi";
print out: "}";
print out: "link_libffi() {";
print out: "	compile_libffi";
print out: "}";
print out:;
print out: "get_build_file_of_sourcefile() {";
print out: "	buildfile=\"`basename $1`.o\"";
print out: "	echo \"$build_path/$buildfile\"";
print out: "}";
print out: "get_dependency_file_of_sourcefile() {";
print out: "	depfile=\"`basename $1`.mf\"";
print out: "	echo \"$dependency_path/$depfile\"";
print out: "}";
print out:;
print out: "make_object_file() {";
print out: "	changed_files=$((changed_files+1))";
print out: "	mkdir -p \"$build_path\" > /dev/null 2>&1";
print out: "	mkdir -p \"$dependency_path\" > /dev/null 2>&1";
print out: "	build_file=`get_build_file_of_sourcefile \"$1\"`";
print out: "	dependency_file=`get_dependency_file_of_sourcefile $1`";
print out: "	if [ $verbose != 0 ]; then";
print out: "		echo \"Compiling: $1 --> $build_file\"";
print out: "	else";
print out: "		echo \"Compiling: $1\"";
print out: "	fi";
print out: "	$compiler -c -fPIC \\";
print out: "		$source_libpaths \\";
print out: "		$source_flags \\";
print out: "		$source_defines \\";
print out: "		$source_includes \\";
print out: "		$additional_flags \\";
print out: "		-MMD $1 -o $build_file \\";
print out: "		-MF \"$dependency_file\" \\";
print out: "	$source_libs";
print out: "}";
print out: "source_file_has_changed() {";
print out: "	build_file=`get_build_file_of_sourcefile \"$1\"`";
print out: "	if [ \"$compile_all_deemon\" != 0 ] || \\";
print out: "	 ! [ -f \"$build_file\" ] || \\";
print out: "	   [ \"$1\" -nt \"$build_file\" ]; then";
print out: "		return 0;";
print out: "	fi";
print out: "	depfile=`get_dependency_file_of_sourcefile \"$1\"`";
print out: "	! [ -f \"$depfile\" ] && return 0";
print out: "	depdata=`cat \"$depfile\" | tr -d '\\\\\\\\\\n'`";
print out: "	first=1";
print out: "	for dep in $depdata; do";
print out: "		if [ $first == 1 ]; then first=0; else";
print out: "			if [ \"$dep\" -nt \"$build_file\" ]; then";
print out: "				echo \"Dependency has changed:\"";
print out: "				echo \"\tinput file: $1\"";
print out: "				echo \"\tdepends on: $dep\"";
print out: "				return 0";
print out: "			fi";
print out: "		fi";
print out: "	done";
print out: "	return 1";
print out: "}";
print out: "update_object_file() {";
print out: "	# Compile the object file if it doesn't exist or the source file has changed";
print out: "	source_file_has_changed \"$1\" && make_object_file \"$1\"";
print out: "}";
print out:;
print out: "compile_deemon() {";
print out: "	# Create object files for all sources";
for (x: []{
	yield find_source_files("debug_new")...;
	yield find_source_files("deemon")...;
}()) {
	x = x.replace("\\","/");
	local build_file = fs.path.tail(x).lower()+".o";
	if (build_file in build_files)
		print "ERROR: Buildfile already exists:",build_file;
	build_files.append(build_file);
	print out: "	update_object_file",repr("$source_path/"+x);
}
print out: "}";
print out:;
print out: "link_deemon() {";
print out: "	echo \"Create shared object (library): $lib_outputfile\"";
print out: "	$compiler $source_link_libpaths $source_link_flags $additional_flags \\";
for (x: build_files) print out: "	\t"+repr("$build_path/"+x),"\\";
print out: "	-shared -Wl,-soname,$basic_libname -o \"$lib_outputfile\" $source_link_libs";
print out: "}";
print out: "link_deemon_static() {";
print out: "	echo \"Create executable object (frontend; static): $bin_outputfile\"";
print out: "	$compiler $source_link_libpaths $source_link_flags $additional_flags -o $bin_outputfile \\";
print out: "		\"$build_path/main.c.o\" \\";
for (x: build_files) print out: "		"+repr("$build_path/"+x),"\\";
print out: "	$source_link_libs";
print out: "}";
print out: "make_deemon() {";
print out: "	changed_files=0";
print out: "	compile_deemon";
print out: "	if [ $changed_files == 0 ] && [ -f \"$lib_outputfile\" ]; then";
print out: "		echo \"No changes (not relinking $lib_outputfile)\"";
print out: "	else";
print out: "		link_deemon";
print out: "	fi";
print out: "}";
print out:;
print out: "compile_frontend() {";
print out: "	update_object_file \"$source_path/main.c\"";
print out: "}";
print out:;
print out: "make_deemon_static() {";
print out: "	changed_files=0";
print out: "	compile_deemon";
print out: "	compile_frontend";
print out: "	if [ $changed_files == 0 ] && [ -f \"$bin_outputfile\" ]; then";
print out: "		echo \"No changes (not relinking $bin_outputfile)\"";
print out: "	else";
print out: "		link_deemon_static";
print out: "	fi";
print out: "}";
print out:;
print out: "link_frontend() {";
print out: "	echo \"Create executable object (frontend): $bin_outputfile\"";
print out: "	$compiler \\";
print out: "		$frontend_libpaths \\";
print out: "		$frontend_defines \\";
print out: "		$frontend_includes \\";
print out: "		$frontend_flags \\";
print out: "		$additional_flags \\";
print out: "		-o $bin_outputfile \\";
print out: "		\"$build_path/main.c.o\" \\";
print out: "		$frontend_libs";
print out: "}";
print out:;
print out: "make_frontend() {";
print out: "	changed_files=0";
print out: "	compile_frontend";
print out: "	if [ $changed_files == 0 ] && [ -f \"$bin_outputfile\" ]; then";
print out: "		echo \"No changes (not rebuilding $bin_outputfile)\"";
print out: "	else";
print out: "		link_frontend";
print out: "	fi";
print out: "}";
print out:;
print out: "check_last_build_was_static() {";
print out: "	check_file=\"$root_path/.last_build_was_static\"";
print out: "	if [ -f \"$check_file\" ]; then";
print out: "		if [ $link_staticly == 0 ]; then";
print out: "			rm $bin_outputfile";
print out: "		fi";
print out: "	else";
print out: "		if [ $link_staticly != 0 ]; then";
print out: "			rm $bin_outputfile";
print out: "		fi";
print out: "	fi";
print out: "	if [ $link_staticly != 0 ]; then";
print out: "		> \"$check_file\"";
print out: "	else";
print out: "		rm \"$check_file\" > /dev/null 2>&1";
print out: "	fi";
print out: "}";
print out: "exec_compile() {";
print out: "	compile_libffi || return $?";
print out: "	compile_deemon || return $?";
print out: "	compile_frontend || return $?";
print out: "	return 0";
print out: "}";
print out: "exec_make() {";
print out: "	check_last_build_was_static";
print out: "	make_libffi || return $?";
print out: "	if [ $link_staticly != 0 ]; then";
print out: "		make_deemon_static || return $?";
print out: "	else";
print out: "		make_deemon || return $?";
print out: "		make_frontend || return $?";
print out: "	fi";
print out: "	return 0";
print out: "}";
print out: "exec_link() {";
print out: "	check_last_build_was_static";
print out: "	link_libffi || return $?";
print out: "	if [ $link_staticly != 0 ]; then";
print out: "		link_deemon_static || return $?";
print out: "	else";
print out: "		link_deemon || return $?";
print out: "		link_frontend || return $?";
print out: "	fi";
print out: "	return 0";
print out: "}";
print out: "exec_install() {";
print out: "	if [ $compile_force != 1 ] && [ -d \"/usr/bin/lib/include\" ]; then";
print out: "		echo \"\"";
print out: "		echo \"!!! ATTENTION !!!\"";
print out: "		echo \"Library folder of deemon v100 found on your machine\"";
print out: "		echo \"Deemon now uses '/usr/lib/deemon/include', but for\"";
print out: "		echo \"portability still searches the folder of the deemon\"";
print out: "		echo \"executable + 'lib', which defaults '/usr/bin/lib'\"";
print out: "		echo -e \"To fix this problem and remove v100, type: '\\033[0;32msudo ./make.sh purge100\\033[0m'\"";
print out: "		echo -e \"To ignore this problem, add '\\033[0;32m--force\\033[0m'\" when calling make.sh";
print out: "		echo \"\"";
print out: "		return 1";
print out: "	fi";
print out:;
print out: "	exec_make || return $?";
print out: "	if [ $link_staticly == 0 ]; then";
print out: "		lib_api=\"$install_lib_path/$basic_libname\"";
print out: "		lib_dst=\"$install_lib_path/$full_libname\"";
print out:;
print out: "		echo \"Installing library: $lib_dst\"";
print out: "		cp \"$lib_outputfile\" \"$lib_dst\" || return $?";
print out: "		chmod 0775 \"$lib_dst\"";
print out:;
print out: "		echo \"Adding update-alternative : '$update_alternatives_libname' '$lib_dst'\"";
print out: "		update-alternatives --install \"$lib_api\" \"$update_alternatives_libname\" \"$lib_dst\" "+DEE_VERSION_API+"";
print out: "	fi";
print out:;
print out: "	exe_dst=\"$install_bin_path/$full_binname\"";
print out: "	echo \"Installing Executable: $exe_dst\"";
print out: "	cp \"$bin_outputfile\" \"$exe_dst\" || return $?";
print out: "	chmod 0775 \"$exe_dst\"";
print out: "	echo \"Adding update-alternative : '$update_alternatives_binname2' '$exe_dst'\"";
print out: "	update-alternatives --install \"$install_bin_path/$update_alternatives_binname2\" \"$update_alternatives_binname2\" \"$exe_dst\" "+DEE_VERSION_API+"";
print out:;
print out: "	echo \"Adding update-alternative : '$update_alternatives_binname' '$install_bin_path/$update_alternatives_binname2'\"";
print out: "	update-alternatives --install \"$install_bin_path/$update_alternatives_binname\" \"$update_alternatives_binname\" \"$install_bin_path/$update_alternatives_binname2\" "+DEE_VERSION_FULL+"";
print out:;
print out: "	echo \"Installing Library: $include_libpath\"";
print out: "	# NOTE: If any headers get removed at one point, add a rm for them here";
print out: "	#rm -r \"$include_libpath/include\" # Keep old headers (only overwrite with new)";
print out: "	mkdir \"$include_libpath\" > /dev/null 2>&1";
print out: "	cp -R \"$root_path/lib/include\" \"$include_libpath\"";
print out: "	";
print out: "	echo \"Compiling extensions\"";
print out: "	deemon \"$source_path/makedex.dee\"";
print out: "	";
print out: "	# Make sure everything in the libpath has the correct permissions";
print out: "	chmod -R 0775 \"$include_libpath\"";
print out: "}";
print out:;
print out: "exec_clean() {";
print out: "	cd \"$libffi_path\"";
print out: "	bash ./clean_libffi.sh";
print out: "	cd \"$root_path\"";
print out: "	rm -r \"$root_path/build\" > /dev/null 2>&1";
print out: "	rm -r \"$root_path/ipch\" > /dev/null 2>&1";
print out: "	if [ $compile_all_deemon != 0 ]; then";
print out: "		rm deemon.* > /dev/null 2>&1";
print out: "		rm libdeemon.* > /dev/null 2>&1";
print out: "	fi";
print out: "	rm deemon.exp > /dev/null 2>&1";
print out: "	rm deemon.ilk > /dev/null 2>&1";
print out: "	rm deemon.lib > /dev/null 2>&1";
print out: "	rm libdeemon.exp > /dev/null 2>&1";
print out: "	rm libdeemon.ilk > /dev/null 2>&1";
print out: "	rm libdeemon.lib > /dev/null 2>&1";
print out: "	rm .last_build_was_static > /dev/null 2>&1";
print out: "	rm .vs/_project.sdf > /dev/null 2>&1";
print out: "	rm .vs/_project.opensdf > /dev/null 2>&1";
print out: "	rm .vs/_project.suo > /dev/null 2>&1";
print out: "	rm .vs/_project.v12.suo > /dev/null 2>&1";
print out: "	return 0";
print out: "}";
print out:;
print out: "try_rm() {";
print out: "	if [ -f \"$1\" ]; then";
print out: "		echo \"Removing: '$1'\"";
print out: "		rm \"$1\"";
print out: "	else";
print out: "		echo \"Not found: '$1'\"";
print out: "	fi";
print out: "}";
print out:;
print out: "exec_remove() {";
print out: "	try_rm \"$install_lib_path/$full_libname\"";
print out: "	try_rm \"$install_bin_path/$full_binname\"";
print out: "	echo \"Removing update-alternatives: '$update_alternatives_libname' => '$install_lib_path/$full_libname'\"";
print out: "	update-alternatives --remove \"$update_alternatives_libname\" \"$install_lib_path/$full_libname\"";
print out: "	echo \"Removing update-alternatives: '$update_alternatives_binname2' => '$install_bin_path/$full_binname'\"";
print out: "	update-alternatives --remove \"$update_alternatives_binname2\" \"$install_bin_path/$full_binname\"";
print out: "	echo \"Removing update-alternatives: '$update_alternatives_binname' => '$install_bin_path/$update_alternatives_binname2'\"";
print out: "	update-alternatives --remove \"$update_alternatives_binname\" \"$install_bin_path/$update_alternatives_binname2\"";
print out: "}";
print out:;
print out: "exec_purge() {";
print out: "	exec_remove";
print out: "	rm -r -v \"$include_libpath\"";
print out: "}";
print out:;
print out: "check_headers() {";
print out: "	if [ -d \"$1\" ]; then";
print out: "		echo \"Deemon headers installed: $1'\"";
print out: "	fi";
print out: "}";
print out: "exec_status() {";
print out: "	if [ -f \"$install_lib_path/$full_libname\" ]; then";
print out: "		echo \"Library installed: '$install_lib_path/$full_libname'\"";
print out: "	fi";
print out: "	if [ -f \"$install_bin_path/$full_binname\" ]; then";
print out: "		echo \"Binary installed: '$install_bin_path/$full_binname'\"";
print out: "	fi";
print out: "	# Check for header locations";
print out: "	check_headers \"$include_libpath/include\"";
print out: "	check_headers \"$include_libpath/include/cxx\"";
print out: "	check_headers \"$include_libpath/include/tpp\"";
print out: "	check_headers \"$include_libpath/include/dex\"";
print out: "	check_headers \"$install_bin_path/lib/include\"";
print out: "	check_headers \"$install_bin_path/lib/include/cxx\"";
print out: "	check_headers \"$install_bin_path/lib/include/tpp\"";
print out: "	check_headers \"$install_bin_path/lib/include/dex\"";
print out: "}";
print out:;
print out: "usage() {";
print out: "	echo \"Usage: $0 [Flags...] {make|install|remove|...}\"";
print out: "	echo \"Flags:\"";
print out: "	echo \"       -h|--help           Display this help\"";
print out: "	echo \"       -version|--version  Display information about the deemon version\"";
print out: "	echo \"       -v|--verbose        Enable verbose output\"";
print out: "	echo \"       -s|--static         Create a staticly linked deemon executable\"";
print out: "	echo \"          --changed        Only compile changed source files (default)\"";
print out: "	echo \"       -a|--all            Compile all deemon source files\"";
print out: "	echo \"       -aa|--allall        Compile all deemon/libffi source files\"";
print out: "	echo \"       -debug|--debug      Compile deemon sources in debug mode (default)\"";
print out: "	echo \"       -ndebug|--no-debug  Compile deemon sources in non-debug mode with optimizations\"";
print out: "	echo \"       -lpath|--lib-path   Set the library path (default: '/usr/lib')\"";
print out: "	echo \"       -bpath|--bin-path   Set the binary path (default: '/usr/bin')\"";
print out: "	echo \"       -f|--flag           Pass a given set of flags to all code-generating compiler calls\"";
print out: "	echo \"       --force             Ignored warnings and forces installation\"";
print out: "	echo \"Modes:\"";
print out: "	echo \"       compile             Compile sources files\"";
print out: "	echo \"       link                Link source files\"";
print out: "	echo \"       make                Compile sources files and link them\"";
print out: "	echo \"       install             Compile sources files, link them and install\"";
print out: "	echo \"       clean               Remove temporary & build files\"";
print out: "	echo \"       remove              Uninstall deemon, but keep library headers\"";
print out: "	echo \"       purge               Uninstall deemon completely\"";
print out: "	echo \"       status              Shows information about the deemon installation on your system\"";
print out: "	echo \"       purge100            Remove old (default) installations of deemon v100 (required for upgrading)\"";
print out: "}";
print out:;
print out: "if [ $# == 0 ]; then";
print out: "	usage";
print out: "	exit 1";
print out: "else";
print out: "	while [[ $# -gt 0 ]]; do";
print out: "		case $1 in";
print out: "			-lpath|--lib-path)";
print out: "				install_lib_path=\"$2\"";
print out: "				shift";
print out: "				;;";
print out: "			-bpath|--bin-path)";
print out: "				install_bin_path=\"$2\"";
print out: "				shift";
print out: "				;;";
print out: "			-f|--flag)";
print out: "				set_any_source_flags \"$2\"";
print out: "				shift";
print out: "				;;";
print out: "			--force)";
print out: "				compile_force=1";
print out: "				;;";
print out: "			-h|--help)";
print out: "				usage";
print out: "				exit 0";
print out: "				;;";
print out: "			-version|--version)";
print out: "				echo \"deemon version "+DEE_VERSION_API+"/"+DEE_VERSION_COMPILER+":"+DEE_VERSION_REVISION+"\"";
print out: "				exit 0";
print out: "				;;";
print out: "			-v|--verbose)";
print out: "				verbose=1";
print out: "				;;";
print out: "			-s|--static)";
print out: "				link_staticly=1";
print out: "				;;";
print out: "			--changed)";
print out: "				compile_all_deemon=0";
print out: "				compile_all_libffi=0";
print out: "				;;";
print out: "			-a|--all)";
print out: "				compile_all_deemon=1";
print out: "				;;";
print out: "			-aa|--allall)";
print out: "				compile_all_deemon=1";
print out: "				compile_all_libffi=1";
print out: "				;;";
print out: "			-debug|--debug)";
print out: "				set_debug_mode 1";
print out: "				;;";
print out: "			-ndebug|--no-debug)";
print out: "				set_debug_mode 0";
print out: "				;;";
print out: "			compile)";
print out: "				check_compiler || exit $?";
print out: "				exec_compile";
print out: "				exit $?";
print out: "				;;";
print out: "			make)";
print out: "				check_compiler || exit $?";
print out: "				exec_make";
print out: "				exit $?";
print out: "				;;";
print out: "			link)";
print out: "				check_compiler || exit $?";
print out: "				exec_link";
print out: "				exit $?";
print out: "				;;";
print out: "			install)";
print out: "				check_compiler || exit $?";
print out: "				exec_install";
print out: "				exit $?";
print out: "				;;";
print out: "			clean)";
print out: "				exec_clean";
print out: "				exit $?";
print out: "				;;";
print out: "			remove)";
print out: "				exec_remove";
print out: "				exit $?";
print out: "				;;";
print out: "			purge)";
print out: "				exec_purge";
print out: "				exit $?";
print out: "				;;";
print out: "			status)";
print out: "				exec_status";
print out: "				exit $?";
print out: "				;;";
print out: "			*)";
print out: "				echo \"Unknown argument: $1\"";
print out: "				usage";
print out: "				exit 1";
print out: "				;;";
print out: "		esac";
print out: "		shift";
print out: "	done";
print out: "	echo \"Error: No mode given\"";
print out: "fi";
print out:;
out.close();








