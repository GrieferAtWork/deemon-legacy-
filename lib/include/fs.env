/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */
#pragma once

#include <__stddef.dee>

#pragma push_macro("fs")
#pragma push_macro("env")
#undef fs
#undef env

module fs {

	//////////////////////////////////////////////////////////////////////////
	// >> object fs::env;
	//    Allows for mapping-style get/set/del functionality of environment variables
	//    >> #include <fs.env>
	//    >> for (local name,value: fs::env) {
	//    >> 	print (repr name).ljust(20),repr value;
	//    >> }
	//    HINT: The operators below simply map to the builtin functions
	//          as already available though <fs> (getenv, delenv, etc.)
	__unused local env = (const class {
		operator    []  (__name) -> __builtin_object(0x009E)(__name);
		operator del[]  (__name) -> __builtin_object(0x00A0)(__name);
		operator    []= (__name,__value) -> __builtin_object(0x00A1)(__name,__value);
		operator __iterself__() -> __builtin_object(0x009D)().operator __iterself__();
	})();

}

#pragma pop_macro("env")
#pragma pop_macro("fs")
