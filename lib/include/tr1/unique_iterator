#!/usr/bin/deemon
/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */
#pragma once

#include <error>

module tr1 {

// Usage:
// >> #include <tr1/unique_iterator>
// >> local list elem = { 10,20,20,30,30,40,50,11,12,12,20,12,70 };
// >> // Skip equivalent consecutive entries in any given iterator
// >> // This will print '10 20 30 40 50 11 12 20 12 70'
// >> print tr1::unique_iterator(elem.operator __iterself__())...;
const class unique_iterator {
	this(iter) {
		this._iter = iter;
	}
	
	// v have the iterator double as an iterable
	operator __iterself__() -> copy this;
	
	operator __iternext__(): __result {
		if (!__builtin_bound(this._first))
			this._first = this._iter.__iternext__();
		while (true) {
			try {
				this._second = this._iter.__iternext__();
			} catch (Signal.StopIteration) {
				__result = this._first;
				del this._first;
				return;
			}
			if (this._first != this._second) break;
			this._first = this._second;
		}
		__result = this._first;
		this._first = this._second;
	}
};

}


