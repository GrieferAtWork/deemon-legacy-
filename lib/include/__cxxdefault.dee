/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */
#pragma once
#ifndef __DEEMON_GUARD___CXXDEFAULT_DEE
#define __DEEMON_GUARD___CXXDEFAULT_DEE
#endif

#include <__cdefault.dee>

#ifdef __STDC_NOCXX__
#	error C++ Simulation headers are disabled \
 	(Don't #define __STDC_NOCXX__ if this isn't intented)
#endif

#pragma warning(push, disable: 1)
#ifndef namespace
#	define namespace module
#endif
#ifndef using
#	define using     import
#endif
#ifndef nullptr
#	define nullptr   none
#endif
#ifndef __nullptr
#	define __nullptr none
#endif
#define _NATIVE_NULLPTR_SUPPORTED 1
#if __has_feature(__exceptions__)
#	define __EXCEPTIONS 1
#endif
#pragma warning(pop)

#ifdef __DEEMON_GUARD_ATOMIC
#	include <cxx/atomic>
#endif
