/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */
#pragma once

#ifndef __DEEMON__
#	error "This header is meant for deemon"
#endif

// Current (maximum) API version
#define __API_VERSION_MAX__ 101

#ifndef __API_VERSION__
// Overwrite this macro before including any headers for
// backwards compatibility in deemon's standard headers
#	define __API_VERSION__ __API_VERSION_MAX__
#elif __API_VERSION__ > __API_VERSION_MAX__
#	error "Unsupported deemon API version (reason: future)"
#endif

#ifndef __has_include
#	define __has_include(x) 0
#endif
#ifndef __has_include_next
#	define __has_include_next(x) 0
#endif
#ifndef __is_identifier
#	define __is_identifier(x) 0
#endif
#ifndef __is_builtin_identifier
#	define __is_builtin_identifier(x) 0
#endif
#ifndef __is_deprecated
#	define __is_deprecated(x) 0
#endif
#ifndef __has_attribute
#	define __has_attribute(x) 0
#endif
#ifndef __has_builtin
#	define __has_builtin(x) 0
#endif
#ifndef __has_cpp_attribute
#	define __has_cpp_attribute(x) 0
#endif
#ifndef __has_declspec_attribute
#	define __has_declspec_attribute(x) 0
#endif
#ifndef __has_extension
#	define __has_extension(x) 0
#endif
#ifndef __has_feature
#	define __has_feature(x) 0
#endif

#ifndef __STR
#	define __STR2(x) #x
#	define __STR(x) __STR2(x)
#endif

#ifndef __CAT
#	define __CAT2(a,b) a##b
#	define __CAT(a,b) __CAT2(a,b)
#endif

#ifndef __pragma
#	define __pragma(x) _Pragma(__STR2(x))
#endif

// Put after a macro function to prevent it from expanding
#define __NO_MACRO

#define __DEEMON_INT1 __int8
#define __DEEMON_INT2 __int16
#define __DEEMON_INT4 __int32
#define __DEEMON_INT8 __int64
#define __DEEMON_INT(sizeof) __CAT2(__DEEMON_INT,sizeof)

#if __has_attribute(__root_)
#define __module __declspec(__root_) module
#else
#define __module module
#endif

#define __unused         __declspec(__unused_)



