/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */

#pragma once

#include <__stddef.dee>

#pragma push_macro("__hashlib")
#pragma push_macro("crc_algorithm")
#pragma push_macro("crc_hasher")
#pragma push_macro("crc")
#pragma push_macro("hashlib")
#undef __hashlib
#undef crc_algorithm
#undef crc_hasher
#undef crc
#undef hashlib
__module hashlib {
	__unused local __hashlib = __builtin_dex("_hashlib");

	//////////////////////////////////////////////////////////////////////////
	// >> class crc_algorithm extends object { ... };
	//        - Descriptor class for a specific crc algorithm
	// >> class crc_algorithm(string name) -> crc_algorithm;
	//    @throws Error.ValueError: Unknown CRC algorithm.
	//    @return: The crc algorithms associated with a given name.
	//        - Use 'crc_algorithm.enum()' for listing all known algorithms.
	//        - Note, that when checking the given name against the actual
	//          name, case is ignored, as well as having some symbol
	//          characters, such as '_', '-' or ' ' all compare equal when
	//          compared against another symbol.
	//        - Multiple consecutive symbols are ignored. Parenthesis is
	//          ignored.
	//          >> // returns the same as 'crc_algorithm("CRC-32")'
	//          >> crc_algorithm("CRC (32)");
	//             CRC-32
	//        - NOTE: Other functions/types that accept a string instead of a
	//          crc_algorithm, use the same special string-compare function,
	//          allowing for the same name aliasing.
	//////////////////////////////////////////////////////////////////////////
	//
	// >> operator __str__() -> string;
	//        - Returns the actual name of the crc (same as returned by
	//          crc_algorithm.name)
	//
	// >> class function enum() -> iterable;
	//    @return: Returns a sequence of all known crc-algorithms.
	//
	// >> property name -> string = { get() };
	//    @return: The internal name of this crc crc_algorithm.
	//
	// >> property alias -> iterable = { get() };
	//    @return: An iterable object listing all name aliases for this
	//             crc_algorithm.
	//
	__unused local crc_algorithm = __hashlib.crc_algorithm;

	//////////////////////////////////////////////////////////////////////////
	// >> class crc_hasher extends object { ... };
	//        - Helper object for creating hashes of raw data
	// >> class crc_hasher(crc_algorithm algo) -> crc_hasher;
	// >> class crc_hasher(string algo) -> crc_hasher;
	//    @throws Error.ValueError: Unknown CRC algorithm.
	//        - Creates a new crc hasher, that can be used for generating
	//          hashes.
	//////////////////////////////////////////////////////////////////////////
	//
	// >> function add(none * p, size_t s) -> none;
	// >> function add(string data, size_t s = size_t(-1)) -> none;
	//        - Adds additional data to the crc generation process.
	//        - How data is split does not matter for the crc result.
	//        - Only order and content of packages matters
	//
	// >> property result -> Integer = { get() };
	//    @return: The current hash result value.
	//        - Note, that the type returned by this property depends on the
	//          used crc_algorithm.
	//
	// >> property algorithm -> crc_algorithm = { get() };
	//    @return: The crc_algorithm that is used by this hasher.
	//
	__unused local crc_hasher = __hashlib.crc_hasher;

	//////////////////////////////////////////////////////////////////////////
	// >> function crc(string algo, none * p, size_t s) -> Integer;
	// >> function crc(string algo, string data, size_t s = size_t(-1)) -> Integer;
	// >> function crc(crc_algorithm algo, none * p, size_t s) -> Integer;
	// >> function crc(crc_algorithm algo, string data, size_t s = size_t(-1)) -> Integer;
	//    @throws Error.ValueError: Unknown CRC algorithm.
	//        - Simplified function for quickly generating hashes.
	//        - Implementation is equivalent to the following:
	//          >> include <hashlib>
	//          >> function crc(algo,args...) {
	//          >> local hasher = hashlib::crc_hasher(algo);
	//          >> hasher.add(args...);
	//          >> return hasher.result;
	//          >> }
	__unused local crc = __hashlib.crc;

}
#pragma pop_macro("__hashlib")
#pragma pop_macro("crc_algorithm")
#pragma pop_macro("crc_hasher")
#pragma pop_macro("crc")
#pragma pop_macro("hashlib")

