/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */
#pragma once
#include "__crypt"

#pragma push_macro("crypt")
#pragma push_macro("base64_encode")
#pragma push_macro("base64_decode")
#undef crypt
#undef base64_encode
#undef base64_decode

module crypt {

	//////////////////////////////////////////////////////////////////////////
	// >> function base64_encode(string data) -> string
	// >> function base64_encode(string data, size_t max_s) -> string
	// >> function base64_encode(none *p, size_t s) -> string
	// >> function base64_encode(string data, string salt) -> string
	// >> function base64_encode(string data, size_t max_s, string salt) -> string
	// >> function base64_encode(none *p, size_t s, string salt) -> string
	//    @throws Error.ValueError: Invalid salt
	//        Encodes given data to base64, either using the common
	//        default salt, or a given salt string with a size of >= 64
	__unused base64_encode = __cryptapi.base64_encode;
	
	//////////////////////////////////////////////////////////////////////////
	// >> function base64_decode(string data) -> string
	// >> function base64_decode(string data, size_t max_s) -> string
	// >> function base64_decode(none *p, size_t s) -> string
	// >> function base64_decode(string data, string salt) -> string
	// >> function base64_decode(string data, size_t max_s, string salt) -> string
	// >> function base64_decode(none *p, size_t s, string salt) -> string
	//    @throws Error.ValueError: Invalid data / Invalid salt
	//        Decodes given data from base64, either using the common
	//        default salt, or a given salt string with a size of >= 64
	__unused base64_decode = __cryptapi.base64_decode;

}

#pragma pop_macro("crypt")
#pragma pop_macro("base64_encode")
#pragma pop_macro("base64_decode")
