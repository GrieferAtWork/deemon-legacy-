/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */

#pragma once

#include <__stddef.dee>

#pragma push_macro("__errno")
#pragma push_macro("errnoname")
#pragma push_macro("errnotext")
#pragma push_macro("win32_errnoname")
#pragma push_macro("win32_errnotext")
#pragma push_macro("errno")
#undef __errno
#undef errnoname
#undef errnotext
#undef win32_errnoname
#undef win32_errnotext
#undef errno
module errno {
	__unused local __errno = __builtin_dex("_errno");

	//////////////////////////////////////////////////////////////////////////
	// >> function errnoname(int id) -> string;
	//    @return: The name of a given errno-style error id.
	__unused local errnoname = __errno.errnoname;

	//////////////////////////////////////////////////////////////////////////
	// >> function errnotext(int id) -> string;
	//    @return: A human-readable description for a given errno-style error
	//             id.
	__unused local errnotext = __errno.errnotext;

#ifdef __WINDOWS__
	//////////////////////////////////////////////////////////////////////////
	// >> function win32_errnoname(DWORD id) -> string;
	//    @return: The name of a given GetLastError-style error id.
	__unused local win32_errnoname = __errno.win32_errnoname;
#endif

#ifdef __WINDOWS__
	//////////////////////////////////////////////////////////////////////////
	// >> function win32_errnotext(DWORD id) -> string;
	//    @return: A human-readable description for a given
	//             GetLastError-style error id.
	__unused local win32_errnotext = __errno.win32_errnotext;
#endif

}
#pragma pop_macro("__errno")
#pragma pop_macro("errnoname")
#pragma pop_macro("errnotext")
#pragma pop_macro("win32_errnoname")
#pragma pop_macro("win32_errnotext")
#pragma pop_macro("errno")

