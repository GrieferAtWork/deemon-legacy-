/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */

#pragma once

#include <__stddef.dee>

#pragma push_macro("__system")
#pragma push_macro("uptime")
#pragma push_macro("cpucount")
#pragma push_macro("system")
#undef __system
#undef uptime
#undef cpucount
#undef system
module system {
	__unused local __system = __builtin_dex("_system");

	//////////////////////////////////////////////////////////////////////////
	// >> function uptime() -> uint64_t;
	//    @throws Error.SystemError: Failed to retrive the current uptime.
	//    @return: The current uptime of the system in milliseconds.
	__unused local uptime = __system.uptime;

	//////////////////////////////////////////////////////////////////////////
	// >> function cpucount() -> uint64_t;
	//    @throws Error.SystemError: Failed to retrive the amount of cores.
	//    @return: The amount of available CPU cores.
	__unused local cpucount = __system.cpucount;

}
#pragma pop_macro("__system")
#pragma pop_macro("uptime")
#pragma pop_macro("cpucount")
#pragma pop_macro("system")

