/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */
#pragma once
#include <__stddef.dee>

module sys {

	//////////////////////////////////////////////////////////////////////////
	// function sys::__argv() -> list
	//     Returns the list of arguments given on the command line
	//     NOTE: Do not call this function directly. - use 'argv' instead
	local const __argv = __builtin_object(0x0161);
	local alias argv = __argv();

#if __has_extension(__exit__)
	//////////////////////////////////////////////////////////////////////////
	// function [[noreturn]] sys::exit(int exitcode) -> none
	//     Termintes the process that is running deemon,
	//     signaling 'exitcode' to the system as return value.
	//     NOTE: Callbacks registered with 'sys::atexit' will be executed
	//     Warning: This function might not be available
	//              in some embedded environments.
	local const exit = __builtin_object(0x00EF);

	//////////////////////////////////////////////////////////////////////////
	// function [[noreturn]] sys::_exit(int exitcode) -> none
	//     Termintes the process that is running deemon,
	//     signaling 'exitcode' to the system as return value.
	//     NOTE: No callbacks will be executed
	//     Warning: This function might not be available
	//              in some embedded environments.
	local const _exit = __builtin_object(0x00F0);

	//////////////////////////////////////////////////////////////////////////
	// function [[noreturn]] sys::fatal() -> none
	//     Termintes the process that is running deemon,
	//     while indicating a fatal problem as reason
	//     NOTE: No callbacks registered through atexit will be executed
	//     - Change in behavior: prior to v101, callbacks
	//       registered with 'sys::atexit' were executed.
	//     Warning: This function might not be available
	//              in some embedded environments.
	local const fatal = __builtin_object(0x00F1);
	
	//////////////////////////////////////////////////////////////////////////
	// function sys::atexit(callable func, object args...) -> none
	//     Register a callback that will either be executed when
	//     'sys::exit()' is called, or when deemon exits normally
	//     Warning: This function might not be available
	//              in some embedded environments.
	local const atexit = __builtin_object(0x00F2);
#endif

}
