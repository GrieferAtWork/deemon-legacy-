/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */
#pragma once

#include <__stddef.dee>

//////////////////////////////////////////////////////////////////////////
// >> class dexmodule { ... };
//        Descriptor object for a loaded deemon extension
//////////////////////////////////////////////////////////////////////////
//
// >> operator str -> string;
//        Returns the name of the dex module
//
// >> operator __hash__(hash_t start) -> hash_t;
// >> operator < (dexmodule right) -> bool;
// >> operator <= (dexmodule right) -> bool;
// >> operator == (dexmodule right) -> bool;
// >> operator != (dexmodule right) -> bool;
// >> operator > (dexmodule right) -> bool;
// >> operator >= (dexmodule right) -> bool;
//        Hash or compare dexmodules.
//
// >> operator __getattr__(string attr) -> object;
// >> operator __delattr__(string attr) -> none;
// >> operator __setattr__(string attr, object v) -> none;
//        Dex export access by name
//        NOTE: the exported attributes of a dex can be enumerated (s.a.: lib:<attrutil>).
//
// >> class function open(string name) -> dexmodule;
//        Opens a dex module by name (same as '__builtin_dex')
//
// >> class property search_path -> list = { get };
//        Returns a list that can freely be modified to specify
//        the sequence of folders checked by the 'D' search marker.
//
// >> class property search_order -> string = { get,del,set };
//        Configure the search order for dex modules.
//        The order is a string marker characters, using one of each at most:
//          - 'V': Searches '/usr/lib/deemon/dex.%d' (Ignored under windows)
//                 '%d' Referrs to deemon's API version
//          - 'D': Searches all paths from 'dexmodule.search_path'
//          - 'C': Searches 'fs::getcwd()'
//          - 'X': Searches 'fs::path::head(fs::readlink("/proc/self/exe\))'
//          - 'P': Searches all paths from '$PATH'
//        Default windows search order: "DCXP"
//        Default linux search order:   "VD"
//        When deleting this attribute ('del dexmodule.search_order;'),
//        the default order will be restored.
//
//////////////////////////////////////////////////////////////////////////
const dexmodule = __builtin_object(0x0094);

