/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */
#pragma once

#include <__stddef.dee>

#pragma push_macro("gc")
#pragma push_macro("collect")
#pragma push_macro("collect_now")
#undef gc
#undef collect
#undef collect_now

module gc {

#if __API_VERSION__ >= 101
	//////////////////////////////////////////////////////////////////////////
	// >> function gc::collect() -> size_t
	//        Collects garbage on all generations.
	//        Returns 'size_t' indicating the amount of collected objects.
	//        NOTE: If garbage is already being collected somewhere
	//              else, this function returns 0 immedietly.
	local const collect = __builtin_object(0x00E6);
#else
	//////////////////////////////////////////////////////////////////////////
	// >> function gc::collect() -> none
	//        Collects garbage on all generations.
	local const function collect { __builtin_object(0x00E6)(); }
#endif

#if 1 /* __API_VERSION__ < ??? */
	//////////////////////////////////////////////////////////////////////////
	// >> function gc::collect_now() -> size_t
	//        Deprecated (use 'collect')
	local const
#if __API_VERSION__ >= 101
		__declspec(__deprecated__("gc::collect_now() is deprecated since v101; Use gc::collect()"))
#endif
		collect_now = __builtin_object(0x00E6);
#endif

}
#pragma pop_macro("gc")
#pragma pop_macro("collect")
#pragma pop_macro("collect_now")
