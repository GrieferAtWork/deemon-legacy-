/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */

local const sinf = __builtin_object(0x0119);
local const sin = __builtin_object(0x0119);
local const sinl = __builtin_object(0x0119);
local const cosf = __builtin_object(0x011A);
local const cos = __builtin_object(0x011A);
local const cosl = __builtin_object(0x011A);
local const tanf = __builtin_object(0x011B);
local const tan = __builtin_object(0x011B);
local const tanl = __builtin_object(0x011B);
local const asinf = __builtin_object(0x011D);
local const asin = __builtin_object(0x011D);
local const asinl = __builtin_object(0x011D);
local const acosf = __builtin_object(0x011E);
local const acos = __builtin_object(0x011E);
local const acosl = __builtin_object(0x011E);
local const atanf = __builtin_object(0x011F);
local const atan = __builtin_object(0x011F);
local const atanl = __builtin_object(0x011F);
local const atan2f = __builtin_object(0x0120);
local const atan2 = __builtin_object(0x0120);
local const atan2l = __builtin_object(0x0120);
local const sinhf = __builtin_object(0x0122);
local const sinh = __builtin_object(0x0122);
local const sinhl = __builtin_object(0x0122);
local const coshf = __builtin_object(0x0123);
local const cosh = __builtin_object(0x0123);
local const coshl = __builtin_object(0x0123);
local const tanhf = __builtin_object(0x0124);
local const tanh = __builtin_object(0x0124);
local const tanhl = __builtin_object(0x0124);
local const sincoshf = __builtin_object(0x0125);
local const sincosh = __builtin_object(0x0125);
local const sincoshl = __builtin_object(0x0125);
local const asinhf = __builtin_object(0x0126);
local const asinh = __builtin_object(0x0126);
local const asinhl = __builtin_object(0x0126);
local const acoshf = __builtin_object(0x0127);
local const acosh = __builtin_object(0x0127);
local const acoshl = __builtin_object(0x0127);
local const atanhf = __builtin_object(0x0128);
local const atanh = __builtin_object(0x0128);
local const atanhl = __builtin_object(0x0128);
local const expf = __builtin_object(0x012A);
local const exp = __builtin_object(0x012A);
local const expl = __builtin_object(0x012A);
#ifdef __STDC_STRICT__
local constexpr function frexpf(__x,__y): __r { local __r,__temp = __builtin_object(0x012B)(__x)...; *__y = __temp; }
local constexpr function frexp (__x,__y): __r { local __r,__temp = __builtin_object(0x012B)(__x)...; *__y = __temp; }
local constexpr function frexpl(__x,__y): __r { local __r,__temp = __builtin_object(0x012B)(__x)...; *__y = __temp; }
#else
local const frexpf = __builtin_object(0x012B);
local const frexp = __builtin_object(0x012B);
local const frexpl = __builtin_object(0x012B);
#endif
local const logf = __builtin_object(0x012C);
local const log = __builtin_object(0x012C);
local const logl = __builtin_object(0x012C);
local const log10f = __builtin_object(0x012D);
local const log10 = __builtin_object(0x012D);
local const log10l = __builtin_object(0x012D);
#ifdef __STDC_STRICT__
local constexpr function modff(__x,__y): __r { local __r,__temp = __builtin_object(0x012E)(__x)...; *__y = __temp; }
local constexpr function modf (__x,__y): __r { local __r,__temp = __builtin_object(0x012E)(__x)...; *__y = __temp; }
local constexpr function modfl(__x,__y): __r { local __r,__temp = __builtin_object(0x012E)(__x)...; *__y = __temp; }
#else
local const modff = __builtin_object(0x012E);
local const modf = __builtin_object(0x012E);
local const modfl = __builtin_object(0x012E);
#endif
local const exp2f = __builtin_object(0x012F);
local const exp2 = __builtin_object(0x012F);
local const exp2l = __builtin_object(0x012F);
local const expm1f = __builtin_object(0x0130);
local const expm1 = __builtin_object(0x0130);
local const expm1l = __builtin_object(0x0130);
local const ilogbf = __builtin_object(0x0131);
local const ilogb = __builtin_object(0x0131);
local const ilogbl = __builtin_object(0x0131);
local const log1pf = __builtin_object(0x0132);
local const log1p = __builtin_object(0x0132);
local const log1pl = __builtin_object(0x0132);
local const log2f = __builtin_object(0x0133);
local const log2 = __builtin_object(0x0133);
local const log2l = __builtin_object(0x0133);
local const logbf = __builtin_object(0x0134);
local const logb = __builtin_object(0x0134);
local const logbl = __builtin_object(0x0134);
local const scalbnf = __builtin_object(0x0135);
local const scalbn = __builtin_object(0x0135);
local const scalbnl = __builtin_object(0x0135);
local const scallnf = __builtin_object(0x0136);
local const scalln = __builtin_object(0x0136);
local const scallnl = __builtin_object(0x0136);
local const powf = __builtin_object(0x0055);
local const pow = __builtin_object(0x0055);
local const powl = __builtin_object(0x0055);
local const sqrtf = __builtin_object(0x0137);
local const sqrt = __builtin_object(0x0137);
local const sqrtl = __builtin_object(0x0137);
local const cbrtf = __builtin_object(0x0138);
local const cbrt = __builtin_object(0x0138);
local const cbrtl = __builtin_object(0x0138);
local const hypotf = __builtin_object(0x0139);
local const hypot = __builtin_object(0x0139);
local const hypotl = __builtin_object(0x0139);
local const erff = __builtin_object(0x013A);
local const erf = __builtin_object(0x013A);
local const erfl = __builtin_object(0x013A);
local const tgammaf = __builtin_object(0x013B);
local const tgamma = __builtin_object(0x013B);
local const tgammal = __builtin_object(0x013B);
local const lgammaf = __builtin_object(0x013C);
local const lgamma = __builtin_object(0x013C);
local const lgammal = __builtin_object(0x013C);
local const ceilff = __builtin_object(0x013D);
local const ceilf = __builtin_object(0x013D);
local const ceilfl = __builtin_object(0x013D);
local const floorff = __builtin_object(0x013E);
local const floorf = __builtin_object(0x013E);
local const floorfl = __builtin_object(0x013E);
local const truncff = __builtin_object(0x013F);
local const truncf = __builtin_object(0x013F);
local const truncfl = __builtin_object(0x013F);
local const roundff = __builtin_object(0x0140);
local const roundf = __builtin_object(0x0140);
local const roundfl = __builtin_object(0x0140);
#if __SIZEOF_LONG__ == 8
local const ilroundf = __builtin_object(0x0142);
local const ilround = __builtin_object(0x0142);
local const ilroundl = __builtin_object(0x0142);
#else
local const ilroundf = __builtin_object(0x0141);
local const ilround = __builtin_object(0x0141);
local const ilroundl = __builtin_object(0x0141);
#endif
#if __SIZEOF_LLONG__ == 4
local const llroundf = __builtin_object(0x0141);
local const llround = __builtin_object(0x0141);
local const llroundl = __builtin_object(0x0141);
#else
local const llroundf = __builtin_object(0x0142);
local const llround = __builtin_object(0x0142);
local const llroundl = __builtin_object(0x0142);
#endif
local const fmodf = __builtin_object(0x0143);
local const fmod = __builtin_object(0x0143);
local const fmodl = __builtin_object(0x0143);
local const rintf = __builtin_object(0x0144);
local const rint = __builtin_object(0x0144);
local const rintl = __builtin_object(0x0144);
#if __SIZEOF_LONG__ == 8
local const lrintf = __builtin_object(0x0146);
local const lrint = __builtin_object(0x0146);
local const lrintl = __builtin_object(0x0146);
#else
local const lrintf = __builtin_object(0x0145);
local const lrint = __builtin_object(0x0145);
local const lrintl = __builtin_object(0x0145);
#endif
#if __SIZEOF_LLONG__ == 4
local const llrintf = __builtin_object(0x0145);
local const llrint = __builtin_object(0x0145);
local const llrintl = __builtin_object(0x0145);
#else
local const llrintf = __builtin_object(0x0146);
local const llrint = __builtin_object(0x0146);
local const llrintl = __builtin_object(0x0146);
#endif
local const nearbyintf = __builtin_object(0x0147);
local const nearbyint = __builtin_object(0x0147);
local const nearbyintl = __builtin_object(0x0147);
local const remainderf = __builtin_object(0x0148);
local const remainder = __builtin_object(0x0148);
local const remainderl = __builtin_object(0x0148);
#ifdef __STDC_STRICT__
local constexpr function remquof(__x,__y): __r { local __r,__temp = __builtin_object(0x0149)(__x)...; *__y = __temp; }
local constexpr function remquo (__x,__y): __r { local __r,__temp = __builtin_object(0x0149)(__x)...; *__y = __temp; }
local constexpr function remquol(__x,__y): __r { local __r,__temp = __builtin_object(0x0149)(__x)...; *__y = __temp; }
#else
local const remquof = __builtin_object(0x0149);
local const remquo = __builtin_object(0x0149);
local const remquol = __builtin_object(0x0149);
#endif
local const copysignf = __builtin_object(0x014A);
local const copysign = __builtin_object(0x014A);
local const copysignl = __builtin_object(0x014A);
local const nextafterf = __builtin_object(0x014B);
local const nextafter = __builtin_object(0x014B);
local const nextafterl = __builtin_object(0x014B);
local const nexttowardf = __builtin_object(0x014C);
local const nexttoward = __builtin_object(0x014C);
local const nexttowardl = __builtin_object(0x014C);
local const fdimf = __builtin_object(0x014D);
local const fdim = __builtin_object(0x014D);
local const fdiml = __builtin_object(0x014D);

local const isfinite = __builtin_object(0x014E);
local const isinf = __builtin_object(0x014F);
local const isnan = __builtin_object(0x0150);
local const isnormal = __builtin_object(0x0151);
local const signbit = __builtin_object(0x0152);
local const isgreater = __builtin_object(0x0153);
local const isgreaterequal = __builtin_object(0x0154);
local const isless = __builtin_object(0x0155);
local const islessequal = __builtin_object(0x0156);
local const islessgreater = __builtin_object(0x0157);
local const isunordered = __builtin_object(0x0158);
