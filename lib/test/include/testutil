#!/usr/bin/deemon -Omax
/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */
#pragma once

#if !__has_builtin(__builtin_exprast)
#error "Missing builtin: __builtin_exprast"
#define __builtin_exprast(x) none
#endif

// NOTE: We compare the repr (string versions), because
//       the asts are never identical as far as deemon is concerned internally
//       >> That is because they always use different variables (only sharing the same names)
#define same_code(a,b) \
({\
	local const __a = repr __builtin_exprast(a);\
	local const __b = repr __builtin_exprast(b);\
	assert __a == __b: "\na:\t%>s\nb:\t%>s" % (__a,__b);\
})
#define diff_code(a,b) \
({\
	local const __a = repr __builtin_exprast(a);\
	local const __b = repr __builtin_exprast(b);\
	assert __a != __b: "\na:\t%>s\nb:\t%>s" % (__a,__b);\
})


#define assert_equals(...) __assert_equals{__VA_ARGS__}
#define __assert_equals{a,b}\
({\
	__stack local __a = (a);\
	__stack local __b = (b);\
	assert __a == __b : "Expected "+repr __a+" == "+repr __b;\
})
