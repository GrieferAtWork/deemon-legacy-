#!/usr/bin/deemon
/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */


// Test the runtime-portion of superargs constructor calls

(({

	local base_called = 0;
	local derv_called = 0;
	local args_called = 0;
	local class base {
		this(x,y,z) {
			assert x == 10;
			assert y == 20;
			assert z == 30;
			++base_called;
		}
	};
	local class derv: base {
		this(x) {
			assert x == "foo";
			++derv_called;
		}

		// NOTE: 'operator __superargs__' is not a [[thiscall]] function.
		operator __superargs__(x) {
			assert x == "foo";
			++args_called;
			return pack 10,20,30;
		}
	};

	assert base_called == 0;
	assert derv_called == 0;
	assert args_called == 0;

	derv("foo");

	assert base_called == 1;
	assert derv_called == 1;
	assert args_called == 1;

}));












