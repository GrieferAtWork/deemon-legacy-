#!/usr/bin/deemon
/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */


// Make sure iterators not marked with [[copyable]] can't be copied
(({

	function [[copyable]] cp_func() { yield 10,20; }
	function             ncp_func() { yield 10,20; }

	iter1 =  cp_func().operator __iterself__();
	iter2 = ncp_func().operator __iterself__();

	// Make sure there's nothing wrong with the compiler, too
	assert !__builtin_noeffect(({ copy iter1; }));
	assert !__builtin_noeffect(({ copy iter2; }));
	
	// Iterators that havn't be moved can always be copied
	copy iter1;
	copy iter2;

	// >> Move the iterator and try again
	assert iter1.operator __iternext__() == 10;
	assert iter2.operator __iternext__() == 10;

	copy iter1;

	assert (({
		__stack local volatile failed = false;
		try {
			copy iter2;
		} catch (...) {
			failed = true;
		}
		failed;
	})) : "That should have failed";

}));


















