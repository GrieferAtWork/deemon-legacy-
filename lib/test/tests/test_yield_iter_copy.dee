#!/usr/bin/deemon
/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */

 
{
	local enter_counter = 0;
	local finally_counter = 0;
	function [[copyable]] copyable_iterfunc() {
		yield 10;
		try {
			++enter_counter;
			yield 20;
		} finally {
			++finally_counter;
		}
	}

	local callback = copyable_iterfunc(); // Create the callback
	local iterator = callback.operator __iterself__(); // Create an iterator
	assert iterator.operator __iternext__() == 10;
	assert enter_counter == 0;
	assert iterator.operator __iternext__() == 20;
	assert enter_counter == 1;
	assert finally_counter == 0;
	// The iterator is now dangling after 'yield 20'

	// Copy the iterator (only allowed because 'test' is marked '[[copyable]]')
	local iterator_copy = copy iterator;
	assert finally_counter == 0;

	// Questionable side-effect:
	//   - Finally is execute twice, yet entered only once
	del iterator_copy;
	assert finally_counter == 1;
	del iterator;
	assert finally_counter == 2;
	assert enter_counter == 1;
}






