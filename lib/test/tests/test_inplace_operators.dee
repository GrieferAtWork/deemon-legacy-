#!/usr/bin/deemon
/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */


(({

	// Test inplace operators on immutable objects
	// accessed through attributes / item-lookup.
	// -> Something like 'inst.foo += "foo"' is actually
	//    compiled as: 'inst.foo = (inst.foo += "foo")',
	//    where the '+=' is allowed to execute as '+' instead.
	//    (Note, that 'inst' will only be evaluated once, through)

	local class test_class { };
	local inst = test_class();
	local get_inst_counter = 0;
	function get_inst() {
		++get_inst_counter;
		return inst;
	}

	get_inst().foo = "foo";
	get_inst().foo += "bar";

	// Make sure 'get_inst()' was evaluated the right amount of times
	assert get_inst_counter == 2;

	// Make sure we got the expected result in 'inst.foo'
	assert inst.foo == "foobar";


	// Now try something similar with item-lookup
	seq = ["a","b","c"];
	local get_seq_counter = 0;
	function get_seq() {
		++get_seq_counter;
		return seq;
	}
	get_seq()[1] *= 2; // Compiled as 'seq[1] = (seq[1] *= 2)'
	assert get_seq_counter == 1;
	assert seq == ["a","bb","c"];

}));






