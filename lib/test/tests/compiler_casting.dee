#!/usr/bin/deemon
/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */
#pragma once

{
	// Check all the different cases in which casting must work correctly
	function foo(a,b,c) {
		return pack a*2,b*2,c*2;
	}

	// sanity check: Regular, constant cast
	assert type ((float)42) == float;
	assert      ((float)42) == 42.0f;

	// Check for cast w/ parentesis
	assert type ((float)(42)) == float;
	assert      ((float)(42)) == 42.0f;

	// Check for cast w/ and multiple arguments (aka. function call)
	assert type ((foo)(     10,20,30)) == tuple;
	assert      ((foo)(     10,20,30)) == (20,40,60);

	// Check for case w/ single argument, that is a tuple
	// >> Make sure the split between cast and call isn't done by
	//    checking for a tuple, but checking if the top-expression is parsed as a sequence.
	assert ({
		__stack local exc = false;
		try {
			// v foo is called with 1 argument (a packed tuple)
			(foo)(pack 10,20,30);
		} catch (...) {
			exc = true;
		}
		exc;
	});
	
	// Check for situations where the cast is actually a recursive c type
	(int)(*x)(int,float);

	typedef int (*TX)(int,float);
	assert type x == TX;
	
	// Check for double-casts (where the cast argument is another cast)
	assert type ((int)(float)20.0) == int;
	assert      ((int)(float)20.0) == 20;
}







