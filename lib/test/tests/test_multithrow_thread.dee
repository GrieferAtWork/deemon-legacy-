#!/usr/bin/deemon -Omax
/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */

#include <thread>
#include <error>


// Multiple exceptions (aka. throw-in-finall) have always been kind-of weird
// >> And while the standard doesn't specify what should happen when a
//    thread terminates with multiple exceptions set and is later re-joined,
//    it is something possible to do in usercode, making it weakly
//    undefined behavior with the requirement that at least one
//    exception it packaged into an Error.ThreadCrash and rethrown.

(({

	local t = thread([]{
		try {
			throw "A";
		} finally {
			throw "B";
		}
	});

	t.start();
	local n_caught_exceptions = 0;
	try {
		try {
			t.join();
		} catch (Error.ThreadCrash) {
			++n_caught_exceptions;
		}
	} catch (Error.ThreadCrash) {
		++n_caught_exceptions;
	}
	
	// Make sure that this corner-case is handled correctly
	// HINT: Griefer@Work's implementation of deemon only throws
	//       one error, though this is weak undefined behavior,
	//       meaning two would be standard-conforming.
	assert n_caught_exceptions == 1 || n_caught_exceptions == 2;

}));

























