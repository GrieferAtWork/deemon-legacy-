#!/usr/bin/deemon
/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */

#include <error>

(({

	// NOTE: If we don't declare this as volatile, the optimizer
	//       will remove this variable, causing 'weak_reference'
	//       to already be dead in line #31.
	volatile local referenced_ob = [10,20,30];
	local weak_reference = weak referenced_ob;

	local locked_ref = weak_reference.lock(); // OK
	del locked_ref,referenced_ob;
	// 'weak_reference' should now be a dangling weak reference
	
	assert ({
		__stack local failed = false;
		try {
			weak_reference.lock();
		} catch (Error.ValueError.ReferenceError) {
			failed = true;
		}
		failed;
	}) : "This should have failed";
	
	// Also test the fallback overload of 'lock'
	assert weak_reference.lock(none) is none;

}));






