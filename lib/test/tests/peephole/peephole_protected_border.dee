#!/usr/bin/deemon
/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */

// v101:1 had a bug that prevented detection of procted code
//        at the high end of the code's address range.
//        Long story short, this code would have caused an
//        assertion-error bickering about the stack being
//        empty at the 'return x' below.

function test(x) {
	if (x) {
		// v101 would have optimize this store_pop into a store,
		//      as the closest statement ('return x') will load
		//      it again.
		//      The fact that the 'OP_LOAD_ARG' generated by
		//      'return x' was protected wasn't recognized because
		//      that protected opcode has the greatest binary address
		//      of all opcodes that are protected.
		x = "barfoo";
	}
	return x;
}

// Test both branches of the if-statement
assert test(false) == false;
assert test(true) == "barfoo";










