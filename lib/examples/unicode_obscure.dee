#!/urs/bin/deemon
/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */

// Using a unicode database, obscure any given
// text into a barely readable garbled mess.
// Usage: $ echo Obscure this text! | deemon unicode_obscure.dee
// NOTE: You might have to view the output in a browser as
//       terminals usually fail to display anything but basic ascii.

#include <file>
#include <random>
#include <fs>

const bd_file = fs::path::join(fs::path::head(__FILE__),"unicode_similar.txt");

// Load the database file describing similar unicode names
mappings = dict();
for (l: file::io(bd_file,"r")) {
  l = l.strip().upper();
  if (l && !l.startswith("#")) {
    local d = l.split(" ").locate_all([](x) -> x.non_empty());
    if (#d == 2 && #d[0] <= 4 && d[0][0] != "A") {
      local wide_id = string::wide::chr((int)("0x"+d[0]));
      local name = d[1].lower();
      mappings.setdefault(name,list()).append(wide_id);
      //print "found:",d[0],"--",id;
    }
  }
}

random r;
for (l: file::io::stdin) for (ch: l) {
  if (ch in mappings) {
   rep = mappings[ch];
   ch = rep[r(unsigned)%#rep];
  }
  file::io::stdout.write((string)ch);
}


