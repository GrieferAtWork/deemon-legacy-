#!/usr/bin/deemon
/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */

// Just a small little examle where I have more fun with clases

class a_class {

	dump() {
		print this.x,this.y,this.z;
	}

	~class() {
		print ">> Destructor:",__FUNCTION__,":",this;
	}

	class(x,y,z) {
		this.x = x;
		this.y = y;
		this.z = z;
	}
	operator + (right) {
		print this,"+",right;
		return 42;
	}

	operator str -> "a_class("+this.x+","+this.y+","+this.z+")";
	
#if 1
	// This does the same as the second version below
	operator for {
		yield this.x;
		yield this.y;
		yield this.z;
	}
#else
	// If you understand the following block, you'll have no
	// problems grasping any of the deeper things deemon can do.
	operator __iterself__ -> ([]{
		yield this.x;
		yield this.y;
		yield this.z;
	}()).operator __iterself__();
#endif

	class property MY_CONSTANT = { . -> 42; }

	my_getset = {
		operator .    ()  { print "Getter:",this; return 42; }
		operator del. ()  { print "Delete:",this; }
		operator .=   (v) { print "Setter:",this,v; }
	}

};

a = a_class(10,20,30);

print "a_class.MY_CONSTANT =",a_class.MY_CONSTANT;

for (x: a) print x;
a.dump();

print a+a;
print a == a;

print a.my_getset;
del a.my_getset;
a.my_getset = 10;

print "before";
del a;
print "after";


