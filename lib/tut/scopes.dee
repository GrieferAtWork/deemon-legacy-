#!/usr/bin/deemon
/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */

// In here I explain how scopes work and how you can explicitly
// state from where constants/variables should be used.
// First off: You should know that every use of a variable in an
//            expression can be prefixed with a scope tag.
//            But loop variables in for-in loop, or exception
//            storage variables in catch-block are always 'local'

local const name = 10;
{
	local const name = 20;
	{
		local const name = 30;

		// Without a specifier, the nearest visible object is used
		print name;             // '30'

		// When 'local' is specified, only objects from the current
		// scope can be referenced (useful to ensure a function)
		// doesn't reference global variables when naming locals.
		print local name;       // '30'

		// When 'global' is specified, only objects from the global
		// scope can be referenced. (That is the scope that doesn't have a predecessor)
		// Note that this referrs to the absolute global scope, meaning
		// that visible objects from weak scopes derived from the absolute
		// global scope cannot be referenced.
		// In other words: If you comment 'const name = 10' out, this won't
		//                 magically start using 'const name = 20'.
		print global name;      // '10'

		// Nothing but an alias for 'global' for all you c++ lovers!
		print ::name;           // '10'

		// You'll probably never use this one, but '__scope' '(' <expr> ')'
		// can be used to explicitly state the exact scope from where
		// objects should be referenced from.
		// Its argument is a negative, integral constant expression that
		// should evaluate to an offset applied to the current scope.
		// e.g.: -1 is the previous scope. -2 is the scope before that (and so on...)
		// Note that both weak scopes and strong scopes count as an offset of '-1'
		// And remember that some statements create hidden weak scopes.
		print __scope(-1) name; // '20'
		
		// Use the third instance of 'name' that was found
		// NOTE: new in v101
		print __nth(3) name; // '10'
	}
}





