#!/usr/bin/deemon
/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */

// Super classes are pretty straight forward.
// And unlike other languages, deemon has a dedicated
// syntax for references to super classes
class a {
	call_foo() {
		// Calling an overwritten function from a derived class
		this.foo();
	}
	foo() {
		print type this,"--","a::foo()";
	}
};
class b: a {
	foo() {
		print type this,"--","b::foo()";
		// Call a method from another base
		// Note how we don't have to explicitly state
		// which base class should be used
		// WARNING: If you would write 'this.super.foo()',
		//          you would once again call b::foo,
		//          as 'this' is an instance of 'c'
		// Internally, this super is replaced with
		// the commented out line, where 'a' is a
		// copy of the exprast used to declare the base
		// of the active class.
		super.foo();
		// __super(a,this).foo();
	}
};
class c: b {
	// Member functions have two implicit attributes:
	// The following would be defined as: [[thiscall,super(b)]]
	// The super attribute states which class super references should link to
	foo() {
		print type this,"--","c::foo()";
		// Call a method from the base class
		super.foo();
	}
};

ob = c();
ob.call_foo();

