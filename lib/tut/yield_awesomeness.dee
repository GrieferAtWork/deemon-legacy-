#!/usr/bin/deemon
/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */

#if !__has_feature(__exceptions__)
#error Your distribution of deemon seems to have exceptions disabled \
       Without them, this file won't work, so don't even bother... \
       To fix this, set 'DEE_CONFIG_LANGUAGE_HAVE_EXCEPTIONS' in <deemon/__conf.inl>
#endif


function yfunc(x) {
	print __FUNCTION__ "("+str x+"): Entered";
	try {
		while (1) {
			print __FUNCTION__ "("+str x+"): yielding:",x;
			// Yield may never return if the iterator is destroyed.
			yield x;
		}
	} finally {
		// Finally always get's executed, even if the iterator is destroyed.
		print __FUNCTION__ "("+str x+"): in finally";
	}
}

print "Creating generator";
generator = yfunc(42);
print "Creating iteartor";
iterator = generator.__iterself__();
print "Begin iteration";

// Read a whole bunch of stuff from 'yfunc'
print "Received:",iterator.__iternext__();
print "Received:",iterator.__iternext__();
print "Received:",iterator.__iternext__();
print "Received:",iterator.__iternext__();
print "Received:",iterator.__iternext__();

// Multiple execution object of the same function
iterator2 = generator.__iterself__();

// Kick-start the second iterator
print "Received:",iterator2.__iternext__();
del iterator2; // Will print the finally message
del iterator; // Will print another finally message

