#!/usr/bin/deemon
/* Copyright (c) 2016 - deemon by Griefer@Work                                    *
 *                                                                                *
 * Permission is hereby granted, free of charge, to any person obtaining a copy   *
 * of this software and associated documentation files (the "Software"), to deal  *
 * in the Software without restriction, including without limitation the rights   *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
 * copies of the Software, and to permit persons to whom the Software is          *
 * furnished to do so, subject to the following conditions:                       *
 *                                                                                *
 * The above copyright notice and this permission notice shall be included in all *
 * copies or substantial portions of the Software.                                *
 *                                                                                *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
 * SOFTWARE.                                                                      *
 */

// Some multi-threading where we communicate data using pipes

#include <thread>
#include <pipe>

// Create a pipe pair
reader,writer = pipe.new()...;

// The thread that produces out food
food = thread("food",function {
	// Fill the writer pipe with some data
	// Reminder: Both print/write versions do the same
	for (
		i = 0;
		i < 20;
		++i
	) {
#if 1
		print writer: "food",i;
#else
		writer.write("food "+str(i)+"\n");
#endif
	}
	// Close the pipe to prevent the main thread from blocking once all data is read
	writer.close();
});

// Start the food thread
food.start();

// Read all data from the receiving end of the pipe
// This would block indefinitely if the writer wasn't closed
food_data = reader.readall();

// Display all the data we just read
print food_data;

// Join the food thread (although it should already be finished)
food.join();


